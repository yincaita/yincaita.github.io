<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VMware配置静态IP模板机</title>
      <link href="/template-virtual-machine/"/>
      <url>/template-virtual-machine/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>事先准备一个静态IP模板虚拟机, 一是能<code>快速克隆一个拥有干净环境的虚拟机</code>, 新的虚拟机通过简单的配置, 就能使用; 二是<code>静态IP易于管理</code>, 一般采用连续的IP地址, 如192.168.1.107、192.168.1.108, 第一个可以单独来学redis、第二个又可以单独安装mysql。</p><h1 id="下载centos"><a href="#下载centos" class="headerlink" title="下载centos"></a>下载centos</h1><p>这里选择安装centos7.8-minimal版本, <a href="https://mirrors.aliyun.com/centos-vault/7.8.2003/isos/x86_64/">阿里云centos7.8地址</a>, 选择iso文件下载即可。</p><h1 id="创建静态IP模板机"><a href="#创建静态IP模板机" class="headerlink" title="创建静态IP模板机"></a>创建静态IP模板机</h1><h2 id="虚拟机配置"><a href="#虚拟机配置" class="headerlink" title="虚拟机配置"></a>虚拟机配置</h2><p>在VMware里新建虚拟机, 选择我们之前下载的镜像即可, 指定虚拟机名称。</p><p><img src="https://img.lsycai.top/template-virtual-machine/choose-image-rename.png" alt="镜像选择及虚拟机命名"></p><p>这里留意下, <code>网络类型</code>的选择, 一般选择桥接&#x2F;NAT, 这个选择会影响后续模板机静态IP的配置, 这里选择NAT。之后一路下一步即可, 有需要进行内存、处理器、硬盘配置的同学可以自行配置。</p><p><img src="https://img.lsycai.top/template-virtual-machine/network-type-choose.png" alt="网络类型选择"></p><p>新建虚拟机向导完成后, 默认会自动启动虚拟机, 接下来完成centos的初始配置即可</p><h2 id="centos初始配置"><a href="#centos初始配置" class="headerlink" title="centos初始配置"></a>centos初始配置</h2><p>centos-minimal版本的初始化过程很简单, 我们配置下语言、设置下root用户密码即可, 其他的就一直下一步, 等待一会叫我们重启, 进入输入用户名、密码界面, 就算成功!</p><p><img src="https://img.lsycai.top/template-virtual-machine/centos-minimal-init-config.png" alt="centos-minimal版本初始化"></p><h2 id="获取网络配置基础信息"><a href="#获取网络配置基础信息" class="headerlink" title="获取网络配置基础信息"></a>获取网络配置基础信息</h2><p>这个时候, 我们的网络实际上还不可用, 尝试做以下动作, 可以看到<code>Network is unreachable</code>, 我们虚拟机ip也是错误的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">ping阿里DNS地址</span><br>ping 223.5.5.5<br></code></pre></td></tr></table></figure><p><img src="https://img.lsycai.top/template-virtual-machine/network-error-show.png" alt="网络错误的现象"></p><p>我们下面进行配置网络.</p><h3 id="虚拟机网络类型为NAT"><a href="#虚拟机网络类型为NAT" class="headerlink" title="虚拟机网络类型为NAT"></a>虚拟机网络类型为NAT</h3><p>这时候, 回忆之前新建虚拟机时, 我们选择的<mark class="hl-label blue">网络类型是NAT</mark>, 而配置模板机IP时, NAT模式需要保证虚拟机网段与VMnet8一致, 照下图配置即可。</p><p><img src="https://img.lsycai.top/template-virtual-machine/virtual-machine-network-config.png" alt="模板机网络配置"></p><p>那么经过这一步后, 我们得到的信息有如下内容, 这些都是在之后配置虚拟机网络文件时需要的。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1. 子网地址 192.168.163.0</span><br>之后我们配置虚拟机IP时, 就能相对随意的配置为 192.168.163.x 了<br><span class="hljs-section"># 2. 网关地址</span><br>192.168.163.2 , 这个地址在之后配置虚拟机网络文件时需要<br><span class="hljs-section"># 3. 子网掩码</span><br>255.255.255.0 , 它同样在之后配置虚拟机网络文件时需要<br><span class="hljs-section"># 4. 当前虚拟机硬件地址, 通过 ip addr 命令获得(上图中已经获得)</span><br>当前虚拟机硬件地址为 00:0c:29:17:75:9b<br></code></pre></td></tr></table></figure><h3 id="虚拟机网络类型为桥接模式"><a href="#虚拟机网络类型为桥接模式" class="headerlink" title="虚拟机网络类型为桥接模式"></a>虚拟机网络类型为桥接模式</h3><p>网络类型为桥接模式时, 我们获得上面4个内容的方式有所不同, 这时候我们需要保证<mark class="hl-label blue">虚拟机的网段与物理机的网段一致, 而网关地址, 需和物理主机网关相同</mark></p><p>我们打开宿主机的命令行, 使用<code>ipconfig</code>查看信息。</p><p><img src="https://img.lsycai.top/template-virtual-machine/host-ip-config-show.png" alt="宿主机IP展示"></p><p>我们依旧能获得4个配置信息, 主要是<code>子网地址</code>和<code>网关地址</code>的差距较大。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1. 子网地址 192.168.1.0</span><br>之后我们配置虚拟机IP时, 就能相对随意的配置为 192.168.1.x 了<br>只不过, 这种情况下虚拟机配置IP地址时, 还是尽量<span class="hljs-code">`和宿主机IP别配重叠了`</span>!<br><span class="hljs-section"># 2. 网关地址</span><br>192.168.1.1<br><span class="hljs-section"># 3. 子网掩码</span><br>255.255.255.0<br><span class="hljs-section"># 4. 当前虚拟机硬件地址, 通过 ip addr 命令获得(上图中已经获得)</span><br>当前虚拟机硬件地址为 00:0c:29:17:75:9b<br></code></pre></td></tr></table></figure><h2 id="配置模板机网络"><a href="#配置模板机网络" class="headerlink" title="配置模板机网络"></a>配置模板机网络</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /etc/sysconfig/network-scripts<br><span class="hljs-meta prompt_"># </span><span class="language-bash">编辑网络配置文件</span><br>vi ifcfg-ens33<br></code></pre></td></tr></table></figure><p>如下是需要修改的内容</p><p><img src="https://img.lsycai.top/template-virtual-machine/network-config-need-edit.png" alt="需要修改的配置"></p><p>下面还有需要新增的配置, 修改并保存。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">IPADDR</span>=<span class="hljs-string">192.168.163.10  # 这个参考上面不同网络类型的说明, 我这里是 NAT</span><br><span class="hljs-attr">NETMASK</span>=<span class="hljs-string">255.255.255.0  # 同上</span><br><span class="hljs-attr">GATEWAY</span>=<span class="hljs-string">192.168.163.2  # 同上</span><br><span class="hljs-attr">HWADDR</span>=<span class="hljs-string">00:0c:29:17:75:9b  # 通过 ip addr 命令获得, ens33设备下的物理地址</span><br><span class="hljs-attr">DNS1</span>=<span class="hljs-string">223.5.5.5  # 这里能配置多个DNS服务器地址, 这里我只配了阿里的DNS服务器</span><br></code></pre></td></tr></table></figure><p>重启网络服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service network restart<br></code></pre></td></tr></table></figure><p><img src="https://img.lsycai.top/template-virtual-machine/network-restart.png" alt="重启网络成功"></p><p>从这时候开始, 我们 <code>ping 百度</code> 也能ping通, yum工具也能正常下载工具包了。</p><h1 id="模板机环境优化"><a href="#模板机环境优化" class="headerlink" title="模板机环境优化"></a>模板机环境优化</h1><p>现在使用xshell等ssh客户端工具, 还无法连接上我们的虚拟机。</p><p>我们下载ssh-server包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y openssh-server<br></code></pre></td></tr></table></figure><p>配置ssh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /etc/ssh/<br>vim sshd_config<br></code></pre></td></tr></table></figure><p>暂时打开允许root用户登录即可。</p><p><img src="https://img.lsycai.top/template-virtual-machine/ssh-allow-root-login.png" alt="ssh允许root用户登录"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">为了免去每次开启 CentOS 时，都要手动开启  sshd 服务，可以将 sshd 服务添加至自启动列表中，输入</span><br>systemctl enable sshd<br></code></pre></td></tr></table></figure><p>修改完后重启服务, 重启sshd服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service sshd restart<br></code></pre></td></tr></table></figure><p>之后得开放22端口, 或者选择性禁用防火墙。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">firewall-cmd --zone=public --add-port=22/tcp --permanent  # 防火墙开启22端口<br>firewall-cmd --reload  # 必须重启防火墙，否则不生效<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">简单点直接禁用防火墙</span><br>systemctl disable firewalld.service<br></code></pre></td></tr></table></figure><p>确保22端口已经被占用</p><p><img src="https://img.lsycai.top/template-virtual-machine/confirm-22port.png" alt="确保22端口已经占用"></p><p>然后就能远程ssh连接了。</p><p><img src="https://img.lsycai.top/template-virtual-machine/ssh-login-success.png" alt="ssh登录成功"></p><div class="note danger simple"><p>danger 如果出现ssh连接不上虚拟机的问题, 参考下面内容</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">ping虚拟机出现超时问题</span><br>ping 192.168.163.10<br></code></pre></td></tr></table></figure><p><img src="https://img.lsycai.top/template-virtual-machine/host-ping-virtual-error.png" alt="宿主机ping不通虚拟机"></p><p>这是因为情况下<mark class="hl-label blue">虚拟机网络模式为NAT模式</mark>的情况下, 虚拟机通过VMnet8与宿主机通信, 但是它们并不处于一个网段下。(网桥模式应该就没这个ping不通的问题)</p><p>进行如下配置即可。</p><p><img src="https://img.lsycai.top/template-virtual-machine/edit-vmnet8-config.png" alt="修改宿主机VMnet8的配置"></p><p>配置后在宿主机上就能ping通虚拟机了, ssh连接也没问题了。</p><div class="note primary simple"><p>primary 在这之后的话, 就能给模板机安装Java、net-tools等环境了, 这个就看个人如何使用了</p></div><h1 id="拷贝模板机"><a href="#拷贝模板机" class="headerlink" title="拷贝模板机"></a>拷贝模板机</h1><p>现在如果我们将这个纯净的模板机做一个<code>克隆</code>, 将克隆后的虚拟机专门用作redis或其他用途, 我们进行如下操作。</p><p><img src="https://img.lsycai.top/template-virtual-machine/clone-template-virtual-machine.png" alt="克隆模板机"></p><p>启动模板机后, 我们需要做如下操作来配置新的虚拟机的网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看新虚拟机的物理地址</span><br>ip addr<br></code></pre></td></tr></table></figure><p><img src="https://img.lsycai.top/template-virtual-machine/new-virtual-machine-hwaddr.png" alt="新虚拟机的物理地址"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /etc/sysconfig/network-scripts<br><span class="hljs-meta prompt_"># </span><span class="language-bash">编辑网络配置文件</span><br>vim ifcfg-ens33<br></code></pre></td></tr></table></figure><p><img src="https://img.lsycai.top/template-virtual-machine/edit-new-network-config.png" alt="修改新虚拟机的网络配置"></p><p>重启网络即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service network restart<br></code></pre></td></tr></table></figure><p>简单测试下, 物理机ping得通新的虚拟机(192.168.163.11)即可咯~</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring源码编译</title>
      <link href="/spring-source-core-compile/"/>
      <url>/spring-source-core-compile/</url>
      
        <content type="html"><![CDATA[<h1 id="源码包下载"><a href="#源码包下载" class="headerlink" title="源码包下载"></a>源码包下载</h1><p>基于Spring v5.2.0RELEASE, 访问下述地址就能下载到源码包, 解压后(解压路径最好别包含<u>空格和中文</u>), 查看gradle目录下的相关信息, 能查到<code>Spring5.2.0</code>版本是用<code>gradle 5.6.2</code>进行打包的。</p><p><img src="https://img.lsycai.top/spring-compile/source.png" alt="Spring源码下载"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://github.com/spring-projects/spring-framework/archive/refs/tags/v5.2.0.RELEASE.zip<br></code></pre></td></tr></table></figure><h1 id="gradle安装"><a href="#gradle安装" class="headerlink" title="gradle安装"></a>gradle安装</h1><p>实际上更为方法的做法是使用<code>gradlew(gradle wrapper)</code>命令, 这样可以不用自己本地安装gradle, 而可以根据项目的wrapper.properties配置文件指定gradle.zip来自行下载这个项目需要的对应版本的gradle, 相关依赖会被保存在<code>c盘/用户/.gradle</code>下。而我这里的做法是配置一个本地gradle并在idea中自定义gradle配置。</p><p>访问以下地址进行下载</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://services.gradle.org/distributions/gradle-5.6.2-bin.zip<br></code></pre></td></tr></table></figure><p>解压并配置环境变量</p><p><img src="https://img.lsycai.top/spring-compile/gradle-config.png" alt="gradle配置"></p><p><img src="https://img.lsycai.top/spring-compile/gradle-install-valid.png" alt="验证配置gradle安装成功"></p><hr><p><strong>配置镜像源(本地仓库没有依赖时的重要配置):</strong> 在<code>gradle-5.6.2/init.d/</code> 目录下, 创建<code>init.gradle</code>, 并添加以下内容</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">allprojects</span>&#123;<br>    <span class="hljs-keyword">repositories</span> &#123;<br>        <span class="hljs-keyword">def</span> REPOSITORY_URL = <span class="hljs-string">&#x27;http://maven.aliyun.com/nexus/content/groups/public/&#x27;</span><br>        all &#123; ArtifactRepository repo -&gt;<br>            <span class="hljs-keyword">def</span> url = repo.url.toString()<br>            <span class="hljs-keyword">if</span> ((repo <span class="hljs-keyword">instanceof</span> MavenArtifactRepository) &amp;&amp; (url.startsWith(<span class="hljs-string">&#x27;https://repo1.maven.org/maven2&#x27;</span>) || url.startsWith(<span class="hljs-string">&#x27;https://jcenter.bintray.com&#x27;</span>))) &#123;<br>                <span class="hljs-keyword">project</span>.logger.lifecycle <span class="hljs-string">&#x27;Repository $&#123;repo.url&#125; replaced by $REPOSITORY_URL .&#x27;</span><br>                remove repo<br>            &#125;<br>        &#125;<br>        maven &#123;<br>            url REPOSITORY_URL<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Spring源码的gradle配置"><a href="#Spring源码的gradle配置" class="headerlink" title="Spring源码的gradle配置"></a>Spring源码的gradle配置</h1><p>首先替换源码根路径下的<code>build.gradle文件</code>中respositories为阿里的, 需要配置以下<code>2个</code>地方。</p><div class="tabs" id="spring源码中根路径build.gradle文件的编译前配置"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#spring源码中根路径build.gradle文件的编译前配置-1">配置1</button></li><li class="tab"><button type="button" data-href="#spring源码中根路径build.gradle文件的编译前配置-2">配置2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="spring源码中根路径build.gradle文件的编译前配置-1"><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">buildscript</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 添加这一块内容...</span><br>    <span class="hljs-keyword">repositories</span>&#123;<br>        maven&#123; url <span class="hljs-string">&#x27;https://maven.aliyun.com/nexus/content/groups/public/&#x27;</span>&#125;<br>        maven&#123; url <span class="hljs-string">&#x27;https://maven.aliyun.com/nexus/content/repositories/jcenter&#x27;</span>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="spring源码中根路径build.gradle文件的编译前配置-2"><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gradle">dependencyManagement &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 修改这一块</span><br>    <span class="hljs-keyword">repositories</span> &#123;<br>        maven&#123; url <span class="hljs-string">&#x27;https://maven.aliyun.com/nexus/content/groups/public/&#x27;</span>&#125;<br>        maven&#123; url <span class="hljs-string">&#x27;https://maven.aliyun.com/nexus/content/repositories/jcenter&#x27;</span>&#125;<br>        mavenCentral()<br>        maven &#123; url <span class="hljs-string">&quot;https://repo.spring.io/libs-spring-framework-build&quot;</span> &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="导入idea"><a href="#导入idea" class="headerlink" title="导入idea"></a>导入idea</h1><p>参考: <a href="https://github.com/spring-projects/spring-framework/blob/main/import-into-idea.md">https://github.com/spring-projects/spring-framework/blob/main/import-into-idea.md</a></p><p>预编译!!!</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gradle :spring-oxm:compileTestJava<br></code></pre></td></tr></table></figure><p><img src="https://img.lsycai.top/spring-compile/precompile-success.png" alt="预编译成功"></p><p>预编译完成后, 直接open Spring源码文件夹即可, 然后在右下角把正在加载的过程给cancel, 然后去Settings中配置gradle。</p><p><img src="https://img.lsycai.top/spring-compile/idea-config-gradle.png" alt="idea配置本地gradle"></p><p>然后重新点击<code>Reload All Gradle Project</code>即可开始下载依赖到idea配置的<code>gradle user home</code>文件夹下</p><p><img src="https://img.lsycai.top/spring-compile/idea-reload-spring-src.png" alt="idea重新加载项目"></p><p>重新加载完成后, 右侧<code>Gradle栏目</code>就会显示Spring源码的各个模块了, idea也开始Updating Indices.</p><p><img src="https://img.lsycai.top/spring-compile/reload-success.png" alt="项目gradle资源reload成功"></p><p>最后进行项目build</p><p><img src="https://img.lsycai.top/spring-compile/build-success.png" alt="Spring源码build成功"></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>我们可以在spring-core等模块的同级, 创建一个my-spring-test的模块(注意是gradle项目), 并引入spring-core进行测试.</p><p>引入内部模块依赖</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">dependencies</span> &#123;<br>    testCompile <span class="hljs-keyword">group</span>: <span class="hljs-string">&#x27;junit&#x27;</span>, name: <span class="hljs-string">&#x27;junit&#x27;</span>, version: <span class="hljs-string">&#x27;4.12&#x27;</span><br><br>    <span class="hljs-keyword">compile</span>(<span class="hljs-keyword">project</span>(<span class="hljs-string">&quot;:spring-core&quot;</span>))<br>    <span class="hljs-keyword">compile</span>(<span class="hljs-keyword">project</span>(<span class="hljs-string">&quot;:spring-context&quot;</span>))<br>    <span class="hljs-keyword">compile</span>(<span class="hljs-keyword">project</span>(<span class="hljs-string">&quot;:spring-beans&quot;</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p>进行测试(过程中如果乱码, 可以加上启动参数<code>-Dfile.encoding=utf-8</code>)</p><p><img src="https://img.lsycai.top/spring-compile/test-success.png" alt="测试成功"></p><h1 id="Spring源码安装到maven本地仓库"><a href="#Spring源码安装到maven本地仓库" class="headerlink" title="Spring源码安装到maven本地仓库"></a>Spring源码安装到maven本地仓库</h1><p>将本地安装的maven的settings.xml复制到<code>c盘/用户/.m2</code>文件夹下, 里面配置有maven本地仓库的位置, 不然gradle项目publish的jar会放到maven仓库默认路径下面。</p><p>然后在publishToMavenLocal之前把之前加的<code>-Dfile.encoding=utf-8</code>参数去掉, 不然会报如下错(在源码上加注释再publish, 也会导致报别的一些错…, 这个没解决得了)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ERROR">Execution failed for task &#x27;:spring-beans:javadoc&#x27;. &gt; Javadoc generation fail<br></code></pre></td></tr></table></figure><p>直接spring &gt; Tasks -&gt; publishing &gt; publishToMavenLocal会报一个<code>&gt; Task :asciidoctor FAILED</code>的错, 但是spring的子模块都能通过publishToMavenLocal直接安装到maven的本地仓库.</p><p><img src="https://img.lsycai.top/spring-compile/gradle-project-install-mavenlocal.png" alt="gradle项目install到maven本地仓库"></p><h1 id="Spring添加注释并支持调试"><a href="#Spring添加注释并支持调试" class="headerlink" title="Spring添加注释并支持调试"></a>Spring添加注释并支持调试</h1><p>我们可以直接把maven本地仓库的<code>spring-context-5.2.0.RELEASE-sources.jar</code>解压, 然后按照如下方式在idea中配置。</p><p>我们对于一个引入了spring-context模块的maven项目进行如下操作进行替换源码包</p><p><img src="https://img.lsycai.top/spring-compile/replace-source.png" alt="项目中替换源码包"></p><p>下面进行调试测试</p><p><img src="https://img.lsycai.top/spring-compile/add-notes-debug.png" alt="替换源码包尝试修改注释"></p><p>另外可以选择将写好注释的文件直接把<code>spring-context-5.2.0.RELEASE-sources.jar</code>中的文件给替换掉的方式, 这样就不用每个项目都配置一遍源码包了。</p><p>实际上其他jdk源码等都能通过这种方式进行添加注释, 这种方式替换源码也是最方便的。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly主题配置</title>
      <link href="/butterfly-theme-config/"/>
      <url>/butterfly-theme-config/</url>
      
        <content type="html"><![CDATA[<h1 id="配置Butterfly的准备"><a href="#配置Butterfly的准备" class="headerlink" title="配置Butterfly的准备"></a>配置Butterfly的准备</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">稳定版, 想安装较新版本可以 <span class="hljs-built_in">clone</span> dev</span><br>git clone -b master https://gitee.com/immyw/hexo-theme-butterfly.git themes/butterfly<br></code></pre></td></tr></table></figure><p>在hexo的<code>_config.yml</code>配置文件中, 配置主题为butterfly</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">butterfly</span>  <span class="hljs-comment"># themes文件夹下的文件夹名称</span><br></code></pre></td></tr></table></figure><p>下载 pug 以及 stylus 的渲染器（默认是没有的, 第一次都得安装）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-renderer-pug hexo-renderer-stylus --save<br></code></pre></td></tr></table></figure><p>重新generate并server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean  # 清理旧的主题生成的文件<br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure><h1 id="Butterfly主题配置"><a href="#Butterfly主题配置" class="headerlink" title="Butterfly主题配置"></a>Butterfly主题配置</h1><p>主题配置文件, 修改<code>themes/Butterfly/_config.yml</code>或者<code>themes/source/_data/_config.butterfly.yml</code></p><h2 id="图片引用"><a href="#图片引用" class="headerlink" title="图片引用"></a>图片引用</h2><p>图片使用OSS外部引用、借助Github实现本地引用都可</p><p>修改几个地方图片的引用, 这里以本地图片为例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># The banner image of home page  主页的top_img</span><br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/self/images/index_img.jpg</span><br><span class="hljs-comment"># Website Background (网站背景)</span><br><span class="hljs-attr">background:</span> <span class="hljs-string">url(/self/images/bk.png)</span><br><span class="hljs-comment"># Avatar (头像)</span><br><span class="hljs-attr">avatar:</span><br>  <span class="hljs-attr">img:</span> <span class="hljs-string">/self/images/author_avatar.png</span><br>  <span class="hljs-attr">effect:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># Favicon(网站图标)</span><br><span class="hljs-attr">favicon:</span> <span class="hljs-string">/img/favicon.png</span><br></code></pre></td></tr></table></figure><p>然后就能butterfly的img目录删了</p><h2 id="导航菜单"><a href="#导航菜单" class="headerlink" title="导航菜单"></a>导航菜单</h2><p>把注释去掉试就行了(只列举了部分)</p><div class="note primary modern"><p>debug模式启动hexo, 修改配置后刷新即生效(部分)</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span><br>  <span class="hljs-attr">Home:</span> <span class="hljs-string">/</span> <span class="hljs-string">||</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-home</span><br>  <span class="hljs-comment"># List||fas fa-list:</span><br>  <span class="hljs-comment">#   Music: /music/ || fas fa-music</span><br>  <span class="hljs-comment">#   Movie: /movies/ || fas fa-video</span><br></code></pre></td></tr></table></figure><p>说明: </p><ul><li>显示: 访问路径 || icon</li><li>可以用yaml的语法, 像上面的List, 能配置悬浮下拉</li><li>这里配置的<code>访问路径</code>, 就能和上面说到的<code>hexo new page</code>结合起来, 让人点击后就能进入我们自定义的<code>page/index.html</code></li></ul><p>如果点击分类出现没找到页面的情况, 检查下是不是public&#x2F;下没有categories文件夹或者categories文件夹下没有index.html, 那么就<code>hexo new page categories</code>, 重新<code>hexo g</code></p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h3 id="代码块样式"><a href="#代码块样式" class="headerlink" title="代码块样式"></a>代码块样式</h3><p>以highlight为例(hexo配置文件)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">highlight:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 开启</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 显示行号</span><br>  <span class="hljs-attr">auto_detect:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 自动换行</span><br>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;    &#x27;</span>  <span class="hljs-comment"># tab替换为4个空格</span><br>  <span class="hljs-attr">wrap:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">hljs:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 开启后方可进行自定义配置</span><br></code></pre></td></tr></table></figure><p>接下来找一个现成的代码块css文件进行引入: <a href="https://github.com/highlightjs/highlight.js/tree/main/src/styles">https://github.com/highlightjs/highlight.js/tree/main/src/styles</a>, 这上面的css都能使用, 样式可以参考 <a href="https://highlightjs.org/static/demo/">https://highlightjs.org/static/demo/</a>, 选一个喜欢的颜色下载对应的css即可, 我是参考官方文档下载到 <mark class="hl-label purple">source/self/</mark>  目录下面, 然后在主题配置文件中引入, 之后每次generate后都会在 <mark class="hl-label default">public/self/</mark>  下, </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Inject</span><br><span class="hljs-comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span><br><span class="hljs-comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span><br><span class="hljs-attr">inject:</span><br>  <span class="hljs-attr">head:</span><br>    <span class="hljs-comment"># 代码块, 可以引入多个css</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;link</span> <span class="hljs-string">rel=&quot;stylesheet&quot;</span> <span class="hljs-string">href=&quot;/self/css/atom-one-light.css&quot;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="代码自动换行"><a href="#代码自动换行" class="headerlink" title="代码自动换行"></a>代码自动换行</h3><p>即不显式横向滚动条</p><p>butterfly配置<code>code_word_wrap: true</code>后, 还得配置hexo的<code>highlight.line_number: false</code>或者是<code>prismjs.line_number: false</code></p><h3 id="其他小改动"><a href="#其他小改动" class="headerlink" title="其他小改动"></a>其他小改动</h3><ul><li>代码拷贝按钮</li><li>在代码块左上角展示代码的语言</li><li>代码展开收缩</li><li>高度限制(代码过长会显示展开按钮)</li></ul><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">highlight_copy:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># copy button</span><br><span class="hljs-attr">highlight_lang:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># show the code language</span><br><span class="hljs-attr">highlight_shrink:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># true: shrink the code blocks / false: expand the code blocks | none: expand code blocks and hide the button</span><br><span class="hljs-attr">highlight_height_limit:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># unit: px</span><br></code></pre></td></tr></table></figure><h2 id="首页文章节选"><a href="#首页文章节选" class="headerlink" title="首页文章节选"></a>首页文章节选</h2><ol><li><p>description: 只显示description</p><p> description在每个md文件的头上加(front-matter)</p></li><li><p>both： 优先选择description，如果没有配置description，则显示自动节选的内容</p></li><li><p>auto_excerpt：只显示自动节选</p></li><li><p>false： 不显示文章内容</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index_post_content:</span><br>  <span class="hljs-attr">method:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">length:</span> <span class="hljs-number">500</span> <span class="hljs-comment"># if you set method to 2 or 3, the length need to config</span><br></code></pre></td></tr></table></figure><h2 id="文章版权"><a href="#文章版权" class="headerlink" title="文章版权"></a>文章版权</h2><p><code>post_copyright.enable: true</code></p><p>如果文章链接被编码了, 可以把<code>post_copyright.decode</code>设置为true</p><p><img src="https://img.lsycai.top/butterfly-config/url-encode.png" alt="文章底部文章链接的URL编码"></p><h2 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">local_search:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>然后安装<code>hexo-generator-search</code>、</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-generator-search --save<br></code></pre></td></tr></table></figure><p>在hexo根目录下的_config.yml中添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># hexo-generator-search 的配置, https://github.com/wzpan/hexo-generator-search</span><br><span class="hljs-attr">search:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">search.xml</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">post</span>  <span class="hljs-comment"># 只有posts下的md会被纳入, 并在 hexo g 的时候读入文章生成 search.xml 的本地搜索数据, 放在public/目录下</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 将文章全部数据进行纳入</span><br></code></pre></td></tr></table></figure><p>clean-g, 看是否有search.xml文件在hexo根目录下</p><p>hexo s后进网站验证搜索功能</p><h2 id="首页打字效果动态"><a href="#首页打字效果动态" class="headerlink" title="首页打字效果动态"></a>首页打字效果动态</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># the subtitle on homepage (主页subtitle)</span><br><span class="hljs-attr">subtitle:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># Typewriter Effect (打字效果)</span><br>  <span class="hljs-attr">effect:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># loop (循环打字)</span><br>  <span class="hljs-attr">loop:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># source调用第三方服务</span><br>  <span class="hljs-comment"># source: false 关闭调用</span><br>  <span class="hljs-comment"># source: 1  调用博天api的随即语录(简体)</span><br>  <span class="hljs-comment"># source: 2  调用一言网的一句话(简体)</span><br>  <span class="hljs-comment"># source: 3  调用一句网(简体)</span><br>  <span class="hljs-comment"># source: 4  调用今日诗词(简体)</span><br>  <span class="hljs-comment"># subtitle 会先显示 source , 再显示 sub 的內容</span><br>  <span class="hljs-attr">source:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 如果有英文逗号&#x27;,&#x27;,使用转义字符 &#x27;&amp;#44;&#x27; 代替 </span><br>  <span class="hljs-comment"># 如果有英文双引号 &#x27;&quot;&#x27;,使用转义字符 &#x27;&amp;quot;&#x27; 代替</span><br>  <span class="hljs-comment"># 开头不允许转义字符, 如需要, 请把整个句子用双引号包住</span><br>  <span class="hljs-comment"># 如果关闭打字效果, subtitle只会显示sub的第一行文字</span><br>  <span class="hljs-attr">sub:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">万丈高楼平地起&amp;#44;</span> <span class="hljs-string">勿在浮沙筑高台.</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">才下眉头&amp;#44;</span> <span class="hljs-string">却上心头.</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">千行代码&amp;#44;</span> <span class="hljs-string">bug何处藏.</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">NullPointerException</span><br></code></pre></td></tr></table></figure><h2 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-lazyload-image --save<br></code></pre></td></tr></table></figure><p>hexo配置文件<code>_config.yml</code>中增加以下内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">lazyload:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">loadingImg:</span> <span class="hljs-string">/self/images/loading.gif</span>  <span class="hljs-comment"># 动图的路径</span><br></code></pre></td></tr></table></figure><h1 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h1><div class="note info flat"><p>SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。</p></div><p>首先把hexo配置文件中 <code>年/月/日/文章名/</code>的访问方式直接修改为<code>文章名</code>, 并且文章名不建议中文.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">permalink:</span> <span class="hljs-string">:title/</span><br></code></pre></td></tr></table></figure><h2 id="百度收录"><a href="#百度收录" class="headerlink" title="百度收录"></a>百度收录</h2><p><img src="https://img.lsycai.top/butterfly-config/zhanzhang-baidu.png" alt="百度普通收录"></p><p>选用其中一种或者混用都可。</p><h3 id="sitemap方式"><a href="#sitemap方式" class="headerlink" title="sitemap方式"></a>sitemap方式</h3><p>我们可以定期将网站链接放到sitemap中, 然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap, 对其中的链接进行处理, 但收录速度慢于API推送。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-generator-sitemap --save<br>npm install hexo-generator-baidu-sitemap --save<br></code></pre></td></tr></table></figure><p>帮助网站生成站内地图文件, 安装后, 运行<code>hexo g</code>后就能在<code>public/</code>目录下看到有sitemap.xml, 该文件维护了站内每个页面的链接等信息。</p><p>然后关联百度和自己网站sitemap.xml即可(如图所示), 最后点击提交即可。</p><p><img src="https://img.lsycai.top/butterfly-config/commit-sitemap.png" alt="百度提交sitemap"></p><h3 id="API提交的方式"><a href="#API提交的方式" class="headerlink" title="API提交的方式"></a>API提交的方式</h3><p>先使用postman测试下可行性</p><p><img src="https://img.lsycai.top/butterfly-config/api-conmmit.png" alt="API提交方式"></p><div class="note info flat"><p>接下来在hexo中进行配置</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-baidu-url-submit --save<br></code></pre></td></tr></table></figure><p>然后在hexo的配置文件中新增配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">baidu_url_submit:</span><br>  <span class="hljs-attr">count:</span> <span class="hljs-number">20</span> <span class="hljs-comment"># 提交最新的20个链接</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">lsycai.top</span> <span class="hljs-comment"># 在百度站长平台中注册的域名</span><br>  <span class="hljs-attr">token:</span> <span class="hljs-string">XXXXX</span> <span class="hljs-comment"># 请注意这是您的秘钥, 所以请不要把博客源代码发布在公众仓库里!</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">baidu_urls.txt</span> <span class="hljs-comment"># 文本文档的地址, 新链接会保存在此文本文档里</span><br></code></pre></td></tr></table></figure><p>然后新增deploy</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">&#x27;git&#x27;</span><br>  <span class="hljs-attr">repository:</span> <br>    <span class="hljs-attr">github:</span> <span class="hljs-string">git@github.com:yincaita/yincaita.github.io.git,master</span>  <span class="hljs-comment"># 最后是仓库名.git, 分支名</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">baidu_url_submitter</span>  <span class="hljs-comment"># 新增这一条</span><br></code></pre></td></tr></table></figure><p>这样执行<code>hexo g</code>, 就会将链接放到我们制定path的文件中；<code>hexo deploy</code>的时候，这些链接就会被推送了至百度。</p><p><img src="https://img.lsycai.top/butterfly-config/urls-generate.png" alt="hexo g文章链接保存"></p><p><img src="https://img.lsycai.top/butterfly-config/urls-push.png" alt="hexo d文章链接推送百度"></p><div class="note success flat"><p>被百度收录后的效果图</p></div><p><img src="https://img.lsycai.top/butterfly-config/baidu-accumulate.png" alt="百度收录后的效果图"></p><hr><p>该部分参考：</p><ul><li>百度收录参考: <a href="https://blog.csdn.net/sunshine940326/article/details/70936988">https://blog.csdn.net/sunshine940326/article/details/70936988</a></li><li>hexo配置文件新增deploy的格式: <a href="https://www.jianshu.com/p/f37452d4978e">https://www.jianshu.com/p/f37452d4978e</a></li></ul><h1 id="方便升级butterfly"><a href="#方便升级butterfly" class="headerlink" title="方便升级butterfly"></a>方便升级butterfly</h1><p>参考: </p><ul><li><a href="https://butterfly.js.org/posts/21cfbf15#%E5%8D%87%E7%B4%9A%E5%BB%BA%E8%AD%B0">https://butterfly.js.org/posts/21cfbf15#%E5%8D%87%E7%B4%9A%E5%BB%BA%E8%AD%B0</a></li><li><a href="https://blog.csdn.net/u012208219/article/details/106883001/">https://blog.csdn.net/u012208219/article/details/106883001/</a></li></ul><p>为了减少升级主题后带来的不便，请使用以下方法<code>themes/butterfly/_config.yml</code>复制到hexo根目录下的<code>_config.butterfly.yml</code>。如果创建了_config.butterfly.yml, 它将会替换主题默认配置文件themes&#x2F;Butterfly&#x2F;_config.yml里的配置项 (不是合并而是<mark class="hl-label orange">替换掉同名配置</mark> ), 之后就只需要通过git pull的方式平滑地升级theme-butterfly了。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo的基本使用</title>
      <link href="/hexo-basics/"/>
      <url>/hexo-basics/</url>
      
        <content type="html"><![CDATA[<h1 id="初识hexo"><a href="#初识hexo" class="headerlink" title="初识hexo"></a>初识hexo</h1><p>hexo是一款基于node.js的快速、简洁且高效的博客框架, 官网：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p>使用前提: 电脑上得有git和node.js的环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">PS E:\hexo&gt; git --version<br>git version 2.31.1.windows.1<br>PS E:\hexo&gt; node --version<br>v12.16.1<br></code></pre></td></tr></table></figure><p>已经安装好git和node.js后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">全局安装hexo</span><br>npm install hexo-cli -g<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看hexo版本</span><br>hexo -v <br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装成功会出现如下显示</span><br>os: Windows_NT 10.0.18363 win32 x64<br>node: 12.19.1<br>v8: 7.8.279.23-node.44<br>uv: 1.39.0<br>......<br></code></pre></td></tr></table></figure><h1 id="hexo使用"><a href="#hexo使用" class="headerlink" title="hexo使用"></a>hexo使用</h1><p>初始化本地hexo的文件</p><p><img src="https://img.lsycai.top/hexo-basic/hexo-init.png" alt="在某个目录初始化hexo博客"></p><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">两种启动命令</span><br>hexo server<br>hexo s [--draft][--debug]  # 可以选择性将_draft目录下的源文件一同展示; 调试模式启动, 对文件的更改无需停止网站只需刷新即可看到效果<br></code></pre></td></tr></table></figure><p>启动成功后就可以访问<code>localhost:4000</code>查看hexo博客默认首页</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">其他的命令</span><br>hexo new &quot;md文件名&quot;  # hexo n<br>hexo clean  # 清理生成的静态页面(public文件夹和db.json被删除)<br>hexo g  # 等同于 hexo generate, 将md等打包生成静态页面(到public目录下)<br>hexo d    # 等同于 hexo deploy, 发布, 需要进行相关配置<br></code></pre></td></tr></table></figure><p>根路径下的目录</p><ul><li><p>public: md文件、样式文件等打包成的静态资源都放在这个目录下, 默认<code>localhost:4000</code>实际上就是访问的<code>public/</code></p></li><li><p>source: 源文件(md文件), generate后就是public&#x2F;下的前端静态文件</p></li><li><p>themes: 主题文件, 可以下载并配置hexo主题插件</p></li><li><p>scaffolds:</p><ul><li><p>控制新创建的md文件的模板(可以提前配置好文件标题、创建时间等)</p></li><li><p>我们使用<code>hexo new</code>可以在<code>source/_post</code>或者<code>source/_draft</code>目录下生成md文件, 一般_post下都是放正式的要发布的文章, 而_draft下放的文章默认generate后都不会生成静态页面文件到public目录下</p></li><li><p><code>hexo new page</code>会新建一个文件夹, 文件夹下默认有一个index.md的文章文件, 用的就是<code>scaffolds/page.md</code>作为模版文件创建的, <code>hexo g</code>后public&#x2F;下就会有相应的page</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new post/draft &quot;md文件名称&quot;<br>hexo new page &quot;文件夹名称&quot;<br>hexo new &quot;md文件名称&quot;  # 同 hexo new post &quot;&quot;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h1 id="hexo的配置文件"><a href="#hexo的配置文件" class="headerlink" title="hexo的配置文件"></a>hexo的配置文件</h1><p>以下只列举一些我编辑过的主要配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Hexo Configuration</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="hljs-comment">## Source: https://github.com/hexojs/hexo/</span><br><br><span class="hljs-comment"># Site</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">yincaiTA&#x27;</span> <span class="hljs-string">Blog</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;小善的学习笔记 🐟&#x27;</span><br><span class="hljs-attr">keywords:</span> <span class="hljs-string">yincaiTA,Java,愔才</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">yincaiTA</span><br><span class="hljs-comment"># 语言: [en, zh-CN, zh-TW]</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br><span class="hljs-comment"># 时区(用上海就行): https://en.wikipedia.org/wiki/List_of_tz_database_time_zones</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">PRC</span><br><br><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://lsycai.top</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:i_month/:i_day/:title/</span><br><br><span class="hljs-comment"># Writing</span><br><span class="hljs-attr">new_post_name:</span> <span class="hljs-string">:title.md</span> <span class="hljs-comment"># File name of new posts</span><br><span class="hljs-attr">default_layout:</span> <span class="hljs-string">post</span><br><span class="hljs-attr">titlecase:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># Transform title into titlecase</span><br><span class="hljs-attr">external_link:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 点击链接新产生一个tab</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">site</span>  <span class="hljs-comment"># 网站内生效</span><br>  <span class="hljs-attr">exclude:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">filename_case:</span> <span class="hljs-number">0</span>  <span class="hljs-comment"># Transform filenames to 1 lower case; 2 upper case</span><br><span class="hljs-attr">render_drafts:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># Display drafts?</span><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 生成md时会同时生成同名文件夹; 生成html时,文件夹内的图片会被复制到这个html存在的目录</span><br><span class="hljs-attr">relative_link:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 链接相对于根文件夹, 设置为true后 butterfly 的很多样式会出错, 像icon显示、代码块展开/复制等</span><br><span class="hljs-attr">future:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 这个highlight可以与主题进行搭配</span><br><span class="hljs-attr">highlight:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">auto_detect:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;    &#x27;</span>  <span class="hljs-comment"># tab替换为4个空格</span><br>  <span class="hljs-attr">wrap:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">hljs:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># Extensions</span><br><span class="hljs-comment">## Plugins: https://hexo.io/plugins/</span><br><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">butterfly</span><br><br><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">&#x27;git&#x27;</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span>  <span class="hljs-comment"># 分支</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:yincaita/yincaita.github.io.git</span>  <span class="hljs-comment"># 最后是仓库名.git</span><br><br><span class="hljs-comment"># 本地搜索插件, hexo-generator-search 的配置, https://github.com/wzpan/hexo-generator-search</span><br><span class="hljs-attr">search:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">search.xml</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">post</span>  <span class="hljs-comment"># 只有posts的md会被纳入, 并在 hexo g 的时候读入文章生成 search.xml 的本地搜索数据, 放在public/目录下</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 将文章全部数据进行纳入</span><br></code></pre></td></tr></table></figure><h1 id="发布到Github-Pages"><a href="#发布到Github-Pages" class="headerlink" title="发布到Github Pages"></a>发布到Github Pages</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br><br>hexo d<br></code></pre></td></tr></table></figure><p>就能使用 <a href="https://yincaita.github.io/">https://yincaita.github.io/</a> 进行访问了</p><h1 id="域名映射配置"><a href="#域名映射配置" class="headerlink" title="域名映射配置"></a>域名映射配置</h1><p>在域名服务商那里配置, 以阿里云为例</p><ol><li>域名映射 github.io 页面的配置</li><li>配置Github Pages 的domain记录: <mark class="hl-label green">github -> settings -> Pages -> add a domain</mark> </li></ol><p><img src="https://img.lsycai.top/hexo-basic/ali-config-domain-access.png" alt="阿里云域名解析"></p><p>最后在hexo生成的public&#x2F;下配置个CNAME文件<code>(直接把CNAME文件放到source目录下即可, 因为source目录下的内容会在 hexo g 后自动放到public目录下)</code>, 文件内容就是域名, 静态博客就能以域名的形式访问.</p><p><img src="https://img.lsycai.top/hexo-basic/config-domain.png" alt="Github Pages配置domain"></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>glidedsky网站爬虫练习</title>
      <link href="/glidedsky/"/>
      <url>/glidedsky/</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫基础-1"><a href="#爬虫基础-1" class="headerlink" title="爬虫基础-1"></a>爬虫基础-1</h1><p><img src="https://img.lsycai.top/glidedsky/basic-1.1.png" alt="爬虫基础-1.1"></p><p>其次，关于<code>_token</code>，新开浏览器(无痕)会发现这个值是会变化的</p><p><img src="https://img.lsycai.top/glidedsky/basic-1.2.png" alt="爬虫基础-1.2"></p><p><img src="https://img.lsycai.top/glidedsky/basic-1.3.png" alt="爬虫基础-1.3"></p><p>思路：每次请求前先访问登陆界面获得token，再和email、password一起请求。这是一个公共的过程，封装成 env.py。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">环境设置</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Env</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-comment"># 每秒获取个数 最多200 但是靠后的因为时间关系 多少会速度差些</span><br>    ip_each = <span class="hljs-number">30</span><br>    <span class="hljs-comment"># 请求数据</span><br>    login_data = &#123;<br>        <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;邮箱&quot;</span>,<br>        <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;密码&quot;</span>,<br>        <span class="hljs-string">&quot;_token&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>    &#125;<br>    <span class="hljs-comment"># api的url</span><br>    proxy_api_url = <span class="hljs-string">&quot;api_url xxx &amp;getnum=&quot;</span> + <span class="hljs-built_in">str</span>(ip_each)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 请求头</span><br>        self.headers = &#123;<br>            <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span><br>                          <span class="hljs-string">&quot;Chrome/89.0.4389.90 Safari/537.36 &quot;</span><br>        &#125;<br>        <span class="hljs-comment"># login_url</span><br>        self.login_url = <span class="hljs-string">&quot;http://www.glidedsky.com/login&quot;</span><br>        <span class="hljs-comment"># 使用session, 自动保存登陆后获取的cookie</span><br>        self.session = requests.session()<br><br>    <span class="hljs-comment"># 登陆获取 _token值</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">self</span>):<br>        response = self.session.get(self.login_url, headers=self.headers)<br>        <span class="hljs-comment"># 正则解析, 将_token值返回</span><br>        self.login_data[<span class="hljs-string">&quot;_token&quot;</span>] = re.search(<span class="hljs-string">&#x27;name=&quot;_token&quot; value=&quot;(.*?)&quot;&#x27;</span>, response.text).group(<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># 登陆数据齐备, 正式登陆</span><br>        self.session.post(self.login_url, data=self.login_data, headers=self.headers)<br>        <span class="hljs-comment"># print(self.login_data[&quot;_token&quot;])</span><br>        <span class="hljs-keyword">return</span> self.session<br><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        实时获取代理ip: 某宝找的1块测试, 1s最多获取200次api 这里获取60 感觉前面的速度快些</span><br><span class="hljs-string">        [&#x27;ip1:port1&#x27;, &#x27;ip2:port2&#x27;]</span><br><span class="hljs-string">        过期后用的华益云 ip数量计费</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_proxy</span>(<span class="hljs-params">self</span>):<br>        response = requests.get(self.proxy_api_url, self.headers)<br>        <span class="hljs-keyword">return</span> response.text.split(<span class="hljs-string">&quot;\r\n&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    env = Env()<br>    <span class="hljs-comment"># env.login()</span><br><br>    <span class="hljs-built_in">print</span>(env.get_proxy())<br></code></pre></td></tr></table></figure><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">爬虫基础1</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> env <span class="hljs-keyword">import</span> Env<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><br><span class="hljs-comment"># 调用封装的登陆环境</span><br>env = Env()<br>session = env.login()<br><br><span class="hljs-comment"># 有了token, cookie等信息, 就能访问爬虫一页面了</span><br>url = <span class="hljs-string">&quot;http://www.glidedsky.com/level/web/crawler-basic-1&quot;</span><br>response = session.get(url, headers=env.headers)<br><span class="hljs-comment"># 获取每一个数字框</span><br>html = etree.HTML(response.text)<br>div_list = html.xpath(<span class="hljs-string">&#x27;//div[@class=&quot;col-md-1&quot;]&#x27;</span>)<br><span class="hljs-comment"># 定义 和</span><br>total = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> div <span class="hljs-keyword">in</span> div_list:<br>    total += <span class="hljs-built_in">int</span>(div.xpath(<span class="hljs-string">&#x27;normalize-space(./text())&#x27;</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;结果是: <span class="hljs-subst">&#123;total&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="爬虫基础-2"><a href="#爬虫基础-2" class="headerlink" title="爬虫基础-2"></a>爬虫基础-2</h1><p>登陆同上，这次需要翻页，这就需要循环获取下一页的链接。</p><p><img src="https://img.lsycai.top/glidedsky/basic-2.1.png" alt="爬虫基础-2.1"></p><p>每一页获取数据方式同<code>爬虫基础1</code>，只是xpath语法有差别。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">爬虫基础2</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> env <span class="hljs-keyword">import</span> Env<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-comment"># 调用封装的登陆环境</span><br>env = Env()<br>session = env.login()<br><br><span class="hljs-comment"># 定义 和</span><br>total = <span class="hljs-number">0</span><br><span class="hljs-comment"># 这次需要循环遍历每一页</span><br>curr_page_url = <span class="hljs-string">&quot;http://www.glidedsky.com/level/web/crawler-basic-2?page=1&quot;</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    response = session.get(curr_page_url, headers=env.headers)<br>    <span class="hljs-comment"># 获取每一个数字框</span><br>    html = etree.HTML(response.text)<br>    div_list = html.xpath(<span class="hljs-string">&#x27;//div[@class=&quot;card-body&quot;]//div[@class=&quot;col-md-1&quot;]&#x27;</span>)<br><br>    <span class="hljs-keyword">for</span> div <span class="hljs-keyword">in</span> div_list:<br>        total += <span class="hljs-built_in">int</span>(div.xpath(<span class="hljs-string">&#x27;normalize-space(./text())&#x27;</span>))<br><br>    cur_page_num = re.search(<span class="hljs-string">&#x27;page=(\\d+)&#x27;</span>, curr_page_url).group(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;前<span class="hljs-subst">&#123;cur_page_num&#125;</span>页数字和为: <span class="hljs-subst">&#123;total&#125;</span>&quot;</span>)<br><br>    <span class="hljs-comment"># 是否还有下一页</span><br>    next_page_btn = html.xpath(<span class="hljs-string">&#x27;//ul[@class=&quot;pagination&quot;]/li[last()]&#x27;</span>)[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment"># 如果下一页按钮有disabled样式, 就没有下一页</span><br>    <span class="hljs-keyword">if</span> next_page_btn.xpath(<span class="hljs-string">&#x27;contains(@class, &quot;disabled&quot;)&#x27;</span>):<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 有下一页, 给下一页url赋值</span><br>        curr_page_url = next_page_btn.xpath(<span class="hljs-string">&#x27;./a/@href&#x27;</span>)[<span class="hljs-number">0</span>]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;结果是: <span class="hljs-subst">&#123;total&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="IP屏蔽-1"><a href="#IP屏蔽-1" class="headerlink" title="IP屏蔽-1"></a>IP屏蔽-1</h1><p>先用奇怪的方法达到修改ip的目的，再进去查看下网页结构，把xpath先行记录一遍，后续有错再改。（代理获取网页内容也可）</p><p>结果是：页面结构和爬虫基础2相同。</p><p><img src="https://img.lsycai.top/glidedsky/ip-mask-3.1.png" alt="IP屏蔽-3.1"></p><p>现在最重要的就是如何获取1000多个可用的代理ip了，我们去某宝随便找一个便宜的<code>高匿ip</code>。</p><p>在env.py的Env类中添加如下成员方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 每秒获取个数 最多200 但是靠后的因为时间关系 多少会速度差些</span><br>   ip_each = <span class="hljs-number">30</span><br>   <br>   <span class="hljs-comment"># api的url</span><br>   proxy_api_url = <span class="hljs-string">&quot;api_url&quot;</span> + <span class="hljs-built_in">str</span>(ip_each)<br>       <br>   <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">       实时获取代理ip: 某宝找的1块测试, 1s最多获取200次api 这里获取60 感觉前面的速度快些</span><br><span class="hljs-string">       [&#x27;ip1:port1&#x27;, &#x27;ip2:port2&#x27;]</span><br><span class="hljs-string">       过期后用的华益云 ip数量计费</span><br><span class="hljs-string">   &quot;&quot;&quot;</span><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_proxy</span>(<span class="hljs-params">self</span>):<br>       response = requests.get(self.proxy_api_url, self.headers)<br>       <span class="hljs-keyword">return</span> response.text.split(<span class="hljs-string">&quot;\r\n&quot;</span>)<br></code></pre></td></tr></table></figure><p>现在将上个<code>爬虫基础2</code>的代码进行改造，添加每次更换一个代理进行请求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">ip反爬1</span><br><span class="hljs-string">    结构和爬虫基础相同</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> env <span class="hljs-keyword">import</span> Env<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 调用封装的登陆环境</span><br>env = Env()<br>session = env.login()<br><br><span class="hljs-comment"># 定义 和</span><br>total = <span class="hljs-number">0</span><br><br><span class="hljs-comment"># 当前页</span><br>curr_page = <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 代理ip的索引, 因为每1秒只能获取最多200个ip</span><br>proxy_index = <span class="hljs-number">0</span><br><br><span class="hljs-comment"># 200个代理ip列表</span><br>proxy_list = env.get_proxy()<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-comment"># 这里采用代理 超时设置为0.6s 设置小一点 那么慢的代理ip就自动跳过了 但是又不能太小 毕竟代理比正常访问慢 跑完估计也得5-8分钟左右</span><br>    <span class="hljs-comment"># 如果报错/返回403页面就用下一个代理 注意代理的 键是http 写成大写代理无效</span><br>    <span class="hljs-keyword">try</span>:<br>        response = session.get(<span class="hljs-string">f&quot;http://www.glidedsky.com/level/web/crawler-ip-block-1?page=<span class="hljs-subst">&#123;curr_page&#125;</span>&quot;</span>,<br>                               headers=env.headers, timeout=<span class="hljs-number">0.3</span>, proxies=&#123;<span class="hljs-string">&quot;http&quot;</span>: proxy_list[proxy_index]&#125;)<br>        <span class="hljs-comment"># 页面响应403 则也应算错误</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-number">403</span> == response.status_code:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">f&quot;该代理已经用过: <span class="hljs-subst">&#123;proxy_list[proxy_index]&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-comment"># 直接使用下一个的proxy</span><br>        proxy_index += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> proxy_index &gt;= env.ip_each:<br>            proxy_list = env.get_proxy()<br>            <span class="hljs-comment"># *****</span><br>            proxy_index = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">continue</span><br><br>    <span class="hljs-comment"># 获取每一个数字框</span><br>    html = etree.HTML(response.text)<br>    div_list = html.xpath(<span class="hljs-string">&#x27;//div[@class=&quot;card-body&quot;]//div[@class=&quot;col-md-1&quot;]&#x27;</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-&quot;</span>*<span class="hljs-number">40</span>)<br>    <span class="hljs-keyword">for</span> div <span class="hljs-keyword">in</span> div_list:<br>        total += <span class="hljs-built_in">int</span>(div.xpath(<span class="hljs-string">&#x27;normalize-space(./text())&#x27;</span>))<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;前<span class="hljs-subst">&#123;curr_page&#125;</span>页数字和为: <span class="hljs-subst">&#123;total&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">if</span> curr_page &gt;= <span class="hljs-number">1000</span>:<br>        <span class="hljs-keyword">break</span><br>    curr_page += <span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;结果是: <span class="hljs-subst">&#123;total&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="IP屏蔽-2"><a href="#IP屏蔽-2" class="headerlink" title="IP屏蔽-2"></a>IP屏蔽-2</h1><p>因为每次请求都是用的新代理ip，代码同 <code>ip屏蔽1</code>题。</p><p>结果（多循环了一次，curr_page &gt;1000 之前没加上 &gt;&#x3D;，对结果没影响）：</p><p><img src="https://img.lsycai.top/glidedsky/ip-mask-4.1.png" alt="IP屏蔽-4.1"></p><h1 id="字体反爬-1"><a href="#字体反爬-1" class="headerlink" title="字体反爬-1"></a>字体反爬-1</h1><p>看过题并分析过html代码的应该都清除，每次刷新源码中的数字都是变化的，而实际显示出的数字都没变化。<br>有心的同学应该比较过每次刷新网页后的base64串的值，它们都是不同的，说明base64串在这里承载了字体转化的功能。</p><p><img src="https://img.lsycai.top/glidedsky/font-non-5.1.png" alt="刷新网页后的base64串比较"><br>所以我们需要对每次的base64串进行分析，在这里了解到了能将base64转化为<code>ttf</code>文件，再利用代码转为<code>xml</code>文件做分析。</p><p>我们在<code>浏览器</code>内(方便后期对比确认结果)，获取base64串，用代码将其转为 ttf 和 xml 文件。</p><blockquote><p><strong>数据采集过程</strong></p></blockquote><p><img src="https://img.lsycai.top/glidedsky/font-non-5.2.png" alt="打开无痕窗口"><br>进入页面后F12，搜索<code>base64</code>，进入界面复制值。</p><p><img src="https://img.lsycai.top/glidedsky/font-non-5.3.png" alt="搜索"></p><p><img src="https://img.lsycai.top/glidedsky/font-non-5.4.png" alt="复制base64串"></p><blockquote><p>代码验证base64的不唯一性  并  转化ttf、xml<br><strong>ttf_test.py</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">关于转码</span><br><span class="hljs-string">    https://blog.csdn.net/yishengzhiai005/article/details/80045042</span><br><span class="hljs-string">    python2中进行Base64编码和解码</span><br><span class="hljs-string">    python3不太一样：因为3.x中字符都为unicode编码，而b64encode函数的参数为byte类型，所以必须先转码。</span><br><span class="hljs-string">    </span><br><span class="hljs-string">测试base64转ttf、分析ttf、xml文件</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> env <span class="hljs-keyword">import</span> Env<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> fontTools.ttLib <span class="hljs-keyword">import</span> TTFont<br><br>env = Env()<br>env.login()<br>session = env.session<br><br>url = <span class="hljs-string">&quot;http://www.glidedsky.com/level/web/crawler-font-puzzle-1&quot;</span><br><br>response = session.get(url, headers=env.headers)<br><br><span class="hljs-comment"># base64_str = re.search(&#x27;base64,(.*?)[)]&#x27;, response.text).group(1)</span><br><br><span class="hljs-comment"># 打印base64 说明每次的base64都有不同之处</span><br><span class="hljs-comment"># print(base64_str)</span><br><span class="hljs-comment"># 解码(base64参数都是unicode编码后的串, 所以str先得encode), 解码针对的是base64_str编码成unicode后的bytes</span><br><br><span class="hljs-comment"># 直接用我们无痕浏览器复制下来的base64串</span><br>base64_str = <span class="hljs-string">&quot;自己补全&quot;</span><br>data = base64.b64decode(base64_str.encode())<br><span class="hljs-comment"># 现在的data依旧是unicode编码的bytes类型</span><br><br><span class="hljs-comment"># 写出为 .ttf</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;font-puzzle-1.ttf&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(data)<br><br><span class="hljs-comment"># 将font-puzzle-1.ttf转为xml文件</span><br>font = TTFont(<span class="hljs-string">&#x27;font-puzzle-1.ttf&#x27;</span>)<br>font.saveXML(<span class="hljs-string">&#x27;font-puzzle-1.xml&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p><strong>第一次获取base64串</strong></p></blockquote><p>将base64串赋值到代码中变量 <code>base64_str</code>，运行生成 ttf 和 xml。<br>将ttf用fontstore<a href="http://font.qqe2.com/index.html">链接</a>（或fontcreator）打开，</p><p><img src="https://img.lsycai.top/glidedsky/font-non-5.5.png" alt="字体反爬-5.5"></p><p>fontstore打开如下图：</p><p><img src="https://img.lsycai.top/glidedsky/font-non-5.6.png" alt="fontstore打开"><br>fontcreator打开如下：</p><p><img src="https://img.lsycai.top/glidedsky/font-non-5.7.png" alt="字体反爬-5.7"><br>我们再打开 xml 进行分析，搜索<code>code</code>相关内容，发现就只有以下2处有效数据(和数字相关的数据)。</p><p><img src="https://img.lsycai.top/glidedsky/font-non-5.8.png" alt="字体反爬-5.8"></p><p><img src="https://img.lsycai.top/glidedsky/font-non-5.9.png" alt="字体反爬-5.9"></p><p>结合<code>xml中上面2图的映射关系</code>和<code>fontstore中的</code>将数据整理成表格：</p><p><img src="https://img.lsycai.top/glidedsky/font-non-5.10.png" alt="字体反爬-5.10"><br>纸面分析完了，进行浏览器内容比较：</p><p><img src="https://img.lsycai.top/glidedsky/font-non-5.11.png" alt="字体反爬-5.11"></p><p>比较浏览器显示：说明字体文件（ttf&#x2F;xml）中的cmap中的<font color=red>name值</font>唯一对应一个<font color=red>实际显示</font>。因为表格中，”zero” –&gt; 8，”one”  –&gt; 5 ……，只是我在图中用了数字表示。</p><blockquote><p><strong>第二次获取base64串</strong></p></blockquote><p>重开一个无痕浏览器，进行同样访问，获得一个新base64串，用代码（ttf_test.py）重新生成ttf和xml文件，fontstore<font color=red>重新</font>打开ttf文件。</p><p>现在先就可以不用再分析xml文件内容了，经过第一次观察，直接看<code>fontstore结果</code>即可，结果是一样的。</p><p><img src="https://img.lsycai.top/glidedsky/font-non-5.12.png" alt="字体反爬-5.12"><br>重要结论：<font color=red>name对应code一直都没有改变的。</font>所以，源码改变，但是实际显示内容不变，肯定是 <code>code --&gt; 实际显示</code>  这一过程的映射发生了变化。正好GlyphOrder映射有所改变。</p><p><img src="https://img.lsycai.top/glidedsky/font-non-5.13.png" alt="字体反爬-5.13"><br>下面是新一轮统计的表格：</p><p><img src="https://img.lsycai.top/glidedsky/font-non-5.14.png" alt="字体反爬-5.14"></p><p>“7”，…..。</p><p>现在靠第二次纸面分析的结果，我们推测：</p><p><img src="https://img.lsycai.top/glidedsky/font-non-5.15.png" alt="字体反爬-5.15"></p><p><img src="https://img.lsycai.top/glidedsky/font-non-5.16.png" alt="字体反爬-5.16"></p><p>推测<font color=red>正确</font>。</p><blockquote><p><strong>思考</strong></p></blockquote><p>现在我们能从xml中获取<code>name --&gt; code</code> 的映射（这是不变的），那么 从 <code>name --&gt; 实际显示</code> 的映射怎么办呢?</p><p>从第二次测试中能得出：实际显示的改变就和<code>GlyphOrder</code>的变化有关（即ID和name的映射的改变）。</p><p>再加上实际显示的结果，我们比较2次测试，表格结果的区别：</p><p><img src="https://img.lsycai.top/glidedsky/font-non-5.17.png" alt="字体反爬-5.17"><br>从xml文件中和<code>&quot;code&quot;</code>有关的部分就只有<code>GlyphOrder</code>和<code>cmap</code>，cma的name、code我们已经用了，也用了GlyphOrder中的name，还有GlyphOrder中的ID规律我们没考虑到。</p><p>我们观察上面2图，很轻松就能发现<mark class="hl-label 就等于">ID-1</mark> </p><blockquote><p><strong>实现</strong></p></blockquote><p>所以代码逻辑也有了：请求获取base64，转为tff再转为xml，lxml解析，（能构建cmap中 <code>name --&gt; code</code>，但我们只关心<code>name--&gt;ID</code>），再构建GlyphOrder中  <code>name --&gt; ID</code>的映射。得到了name，<strong>name其实就是浏览器源码中提起出来的数字，转化为ID，再减一，就成了真实数据了</strong>。但是name中 <code>&#39;zero&#39;</code>需要变为<code>0</code>，方便后期直接进行页面内容转化为真实结果。</p><blockquote><p>代码如下</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> env <span class="hljs-keyword">import</span> Env<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> fontTools.ttLib <span class="hljs-keyword">import</span> TTFont<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><span class="hljs-keyword">import</span> io<br><br><span class="hljs-comment"># 数字-英语 映射</span><br>english_map = &#123;<br>    <span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-string">&#x27;zero&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-string">&#x27;two&#x27;</span>,<br>    <span class="hljs-string">&#x27;3&#x27;</span>: <span class="hljs-string">&#x27;three&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>: <span class="hljs-string">&#x27;four&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>: <span class="hljs-string">&#x27;five&#x27;</span>,<br>    <span class="hljs-string">&#x27;6&#x27;</span>: <span class="hljs-string">&#x27;six&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>: <span class="hljs-string">&#x27;seven&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>: <span class="hljs-string">&#x27;eight&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>: <span class="hljs-string">&#x27;nine&#x27;</span><br>&#125;<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">将源码中的字符串转化为真实的数字</span><br><span class="hljs-string">    src_str: 如&#x27;231&#x27; --&gt; 567  &#x27;23&#x27; --&gt; 56  &#x27;1&#x27; --&gt; 7</span><br><span class="hljs-string">    digit_map: 源码数字 --&gt; 真实数字 的映射 &#123;&quot;zero&quot;: see_num1, &quot;one&quot;: see_num2, ...&#125;</span><br><span class="hljs-string">    返回: 真实数字</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_srcstr_realnum</span>(<span class="hljs-params">src_str, digit_map</span>):<br>    <span class="hljs-comment"># 分解出每一位字符 注意 join参数必须为字符串</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">str</span>(digit_map[english_map[ch]]) <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> src_str))<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">获取从源码中的数字到见到的数字的映射</span><br><span class="hljs-string">    返回: 当前页响应, 当前页的数字映射</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_response_and_digitmap</span>(<span class="hljs-params">page</span>):<br>    url = <span class="hljs-string">f&quot;http://www.glidedsky.com/level/web/crawler-font-puzzle-1?page=<span class="hljs-subst">&#123;page&#125;</span>&quot;</span><br><br>    response = session.get(url, headers=env.headers)<br><br>    base64_str = re.search(<span class="hljs-string">&#x27;base64,(.*?)[)]&#x27;</span>, response.text).group(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># 解码(base64参数都是unicode编码后的串, 所以str先得encode), 解码针对的是base64_str编码成unicode后的bytes</span><br>    data = base64.b64decode(base64_str.encode())<br>    <span class="hljs-comment"># 现在的data依旧是unicode编码的bytes类型, 转化为io流, 避免写文件过程</span><br>    fio = io.BytesIO(data)<br>    font = TTFont(fio)<br>    glyph_order = font.getGlyphOrder()<br>    <span class="hljs-comment"># 数字映射 &#123;&quot;源码中的数字&quot;: &quot;实际看到的数字&quot;, ...&#125;</span><br>    digit_map = &#123;&#125;<br>    <span class="hljs-comment"># 解析GlyphOrder中的&lt;GlyphID id=&quot;&quot; name=&quot;&quot;&gt; 并组成 &#123;&quot;zero&quot;: &quot;see_num1&quot;, &quot;one&quot;: &quot;see_num2&quot;, ...&#125;</span><br>    <span class="hljs-keyword">for</span> glyph_name <span class="hljs-keyword">in</span> glyph_order:<br>        digit_map[glyph_name] = <span class="hljs-built_in">str</span>(font.getGlyphID(glyph_name) - <span class="hljs-number">1</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;源码数字 -&gt; 可见数字: &#x27;</span>, digit_map)<br>    <span class="hljs-keyword">return</span> digit_map, response<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">获取当前页真实的数字和, 一次请求一页, 一页内的数字 映射不会变的</span><br><span class="hljs-string">    page: 第几页数据</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_page_sum</span>(<span class="hljs-params">page</span>):<br>    digit_map, response = get_response_and_digitmap(page)<br>    <span class="hljs-comment"># 获取每一个数字框</span><br>    html = etree.HTML(response.text)<br>    div_list = html.xpath(<span class="hljs-string">&#x27;//div[@class=&quot;card-body&quot;]//div[@class=&quot;col-md-1&quot;]&#x27;</span>)<br><br>    <span class="hljs-comment"># 每页和</span><br>    page_total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> div <span class="hljs-keyword">in</span> div_list:<br>        <span class="hljs-comment"># 一个数字串</span><br>        s = <span class="hljs-built_in">str</span>(div.xpath(<span class="hljs-string">&#x27;normalize-space(./text())&#x27;</span>))<br>        <span class="hljs-comment"># 分别解析, 如&#x27;231&#x27; -&gt; 231</span><br>        page_total += parse_srcstr_realnum(s, digit_map)<br><br>    <span class="hljs-keyword">return</span> page_total<br><br><br>env = Env()<br>env.login()<br>session = env.session<br><br><span class="hljs-comment"># 总和</span><br>total = <span class="hljs-number">0</span><br><span class="hljs-comment"># 定义和</span><br><span class="hljs-keyword">for</span> page_num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1001</span>):<br>    total += get_page_sum(page_num)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;前 <span class="hljs-subst">&#123;page_num&#125;</span> 页和为 <span class="hljs-subst">&#123;total&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="字体反爬-2"><a href="#字体反爬-2" class="headerlink" title="字体反爬-2"></a>字体反爬-2</h1><p>原理同<code>字体反爬1</code>，但是现在从浏览器获取的内容不是数字了，而是汉字，并且xml中camp的name值也并没有像 “zero”、”one”的提示了，所以之前存在的 english_map 现在需要由我们自己构建了，原来english_map是 “1” -&gt; “zero” 的映射（这我们是熟知的），但现在我们需要 “源码中汉字” -&gt; “name” 的映射。</p><p><img src="https://img.lsycai.top/glidedsky/font-non-6.1.png" alt="字体反爬-6.1"></p><blockquote><p>测试get请求获取的内容，编码前和编码后的内容，并生成ttf和xml</p><p>用浏览器能得到base64和显示情况，分析  “源码汉字”  –&gt;  “实际显示” 的过程。</p></blockquote><p>测试代码如下（test_ttf.py）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> fontTools.ttLib <span class="hljs-keyword">import</span> TTFont<br><br><span class="hljs-comment"># 浏览器复制base64串 保持网页不刷新 分析同一页的数据</span><br>base64_str = <span class="hljs-string">&quot;浏览器源码里复制&quot;</span><br>data = base64.b64decode(base64_str.encode())<br><span class="hljs-comment"># 现在的data依旧是unicode编码的bytes类型</span><br><br><span class="hljs-comment"># 写出为 .ttf</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;font-puzzle-2.ttf&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(data)<br><br><span class="hljs-comment"># 将font-puzzle-2.ttf转为xml文件</span><br>font = TTFont(<span class="hljs-string">&#x27;font-puzzle-2.ttf&#x27;</span>)<br>font.saveXML(<span class="hljs-string">&#x27;font-puzzle-2.xml&#x27;</span>)<br></code></pre></td></tr></table></figure><p>用fontstore打开ttf文件，只分析 0 - 9。</p><p><img src="https://img.lsycai.top/glidedsky/font-non-6.2.png" alt="字体反爬-6.2"></p><p>浏览器中实际显示为“零”的情况下：</p><p><img src="https://img.lsycai.top/glidedsky/font-non-6.3.png" alt="字体反爬-6.3"></p><p>对应源码汉字为：“钡”，经过站长工具计算，“钡”的unicode编码为：”\u94a1”</p><p><img src="https://img.lsycai.top/glidedsky/font-non-6.4.png" alt="字体反爬-6.4"></p><p>我们再在xml文件中搜索“钡”的unicode编码，结合xml中cmap的内容，我们直接搜索”uni94a1”，总共2个结果。</p><p><img src="https://img.lsycai.top/glidedsky/font-non-6.5.png" alt="字体反爬-6.5"></p><p>在浏览器中实际显示为“①”的情况下，</p><p><img src="https://img.lsycai.top/glidedsky/font-non-6.6.png" alt="字体反爬-6.6"></p><p>而“成”字对应的unicode编码为“\u6210”，参照cmap中name的值，我们在xml中搜索“uni6210”。</p><p><img src="https://img.lsycai.top/glidedsky/font-non-6.7.png" alt="字体反爬-6.7"></p><p>根据以上2次测试，并根据<code>字体反爬1</code>的结果，很明显能看出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">name = &quot;uni&quot; + &quot;源码汉字的unicode编码 去除\u&quot;<br>根据这个name对应的ID，再减1，结果就是实际的数字。<br></code></pre></td></tr></table></figure><blockquote><p>代码逻辑</p></blockquote><p>先根据GlyphOrder构建 {“name1”: “id”, “name2”, “id2”…} 的字典，之后再获取到”源码汉字”，将汉字进行切割后，取每一位的unicode码（就是name），以unicode码为键，从字典中取id，id再减1就是用户看到的数字。</p><blockquote><p>代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> env <span class="hljs-keyword">import</span> Env<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> fontTools.ttLib <span class="hljs-keyword">import</span> TTFont<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><span class="hljs-keyword">import</span> io<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">将源码中的汉字转化为真实的数字</span><br><span class="hljs-string">    src_str: 如&#x27;随成成&#x27; --&gt; 211</span><br><span class="hljs-string">    uni_map: 源码汉字 --&gt; 真实数字 的映射 &#123;&quot;成&quot;: 1, &quot;随&quot;: 2, ...&#125;</span><br><span class="hljs-string">    返回: 真实数字</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_srcstr_realnum</span>(<span class="hljs-params">src_str, uni_map</span>):<br>    arr = []<br>    <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> src_str:<br>        <span class="hljs-comment"># 每个ch都是一个汉字, 将汉字转为unicode编码, 去除串首的\u即为需要的编码</span><br>        uni = ch.encode(<span class="hljs-string">&#x27;unicode-escape&#x27;</span>).decode()<br>        code = uni.replace(<span class="hljs-string">&#x27;\\u&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        arr.append(uni_map[code])<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(arr))<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">获取从源码中的汉字到见到的数字的映射</span><br><span class="hljs-string">    返回: 当前页响应, name(unicode去除&#x27;uni&#x27;)-&gt;真实数字 的映射 如, (response, &#123;&#x27;7bd9&#x27;: &#x27;0&#x27;, &#x27;9716&#x27;: &#x27;1&#x27;, ...&#125;)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_response_and_unimap</span>(<span class="hljs-params">page</span>):<br>    url = <span class="hljs-string">f&quot;http://www.glidedsky.com/level/web/crawler-font-puzzle-2?page=<span class="hljs-subst">&#123;page&#125;</span>&quot;</span><br><br>    response = session.get(url, headers=env.headers)<br><br>    base64_str = re.search(<span class="hljs-string">&#x27;base64,(.*?)[)]&#x27;</span>, response.text).group(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># 解码(base64参数都是unicode编码后的串, 所以str先得encode), 解码针对的是base64_str编码成unicode后的bytes</span><br>    data = base64.b64decode(base64_str.encode())<br><br>    <span class="hljs-comment"># 现在的data依旧是unicode编码的bytes类型, 转化为io流, 避免写文件过程</span><br>    fio = io.BytesIO(data)<br>    font = TTFont(fio)<br>    glyph_order = font.getGlyphOrder()<br>    <span class="hljs-comment"># xml中：name-&gt;ID映射 &#123;&quot;unicode&quot;: &quot;id-1&quot;, ...&#125; 注意这里的unicode最好把前缀uni去掉, 并字母小写化</span><br>    name_id_map = &#123;&#125;<br>    <span class="hljs-comment"># 解析GlyphOrder中的&lt;GlyphID id=&quot;&quot; name=&quot;&quot;&gt; 并组成 &#123;&quot;unicode1&quot;: &quot;see_num1&quot;, &quot;unicode2&quot;: &quot;see_num2&quot;, ...&#125;</span><br>    <span class="hljs-keyword">for</span> glyph_name <span class="hljs-keyword">in</span> glyph_order:<br>        name_id_map[<span class="hljs-built_in">str</span>(glyph_name).replace(<span class="hljs-string">&#x27;uni&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).lower()] = <span class="hljs-built_in">str</span>(font.getGlyphID(glyph_name) - <span class="hljs-number">1</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;源码汉字unicode码 -&gt; 可见数字: &#x27;</span>, name_id_map)<br>    <span class="hljs-keyword">return</span> name_id_map, response<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">获取当前页真实的数字和, 一次请求一页, 一页内的数字 映射不会变的</span><br><span class="hljs-string">    page: 第几页数据</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_page_sum</span>(<span class="hljs-params">page</span>):<br>    uni_map, response = get_response_and_unimap(page)<br>    <span class="hljs-comment"># 获取每一个数字框</span><br>    html = etree.HTML(response.text)<br>    div_list = html.xpath(<span class="hljs-string">&#x27;//div[@class=&quot;card-body&quot;]//div[@class=&quot;col-md-1&quot;]&#x27;</span>)<br><br>    <span class="hljs-comment"># 每页和</span><br>    page_total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> div <span class="hljs-keyword">in</span> div_list:<br>        <span class="hljs-comment"># 一个数字串</span><br>        s = <span class="hljs-built_in">str</span>(div.xpath(<span class="hljs-string">&#x27;normalize-space(./text())&#x27;</span>))<br>        <span class="hljs-comment"># 分别解析, 如&#x27;231&#x27; -&gt; 231</span><br>        page_total += parse_srcstr_realnum(s, uni_map)<br><br>    <span class="hljs-keyword">return</span> page_total<br><br><br>env = Env()<br>env.login()<br>session = env.session<br><br><span class="hljs-comment"># 总和</span><br>total = <span class="hljs-number">0</span><br><span class="hljs-comment"># 定义和</span><br><span class="hljs-keyword">for</span> page_num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1001</span>):<br>    total += get_page_sum(page_num)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;前 <span class="hljs-subst">&#123;page_num&#125;</span> 页和为 <span class="hljs-subst">&#123;total&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>上面的思路及代码其实有误，会在从 uni_map 中取值的时候会报错(KeyError)。</p><p>修改代码为如下，进行调试：</p><p>①：出错位置添加try…except</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_srcstr_realnum</span>(<span class="hljs-params">src_str, uni_map</span>):<br>    arr = []<br>    <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> src_str:<br>        <span class="hljs-comment"># 每个ch都是一个汉字, 将汉字转为unicode编码, 去除串首的\u即为需要的编码</span><br>        uni = ch.encode(<span class="hljs-string">&#x27;unicode-escape&#x27;</span>).decode()<br>        code = uni.replace(<span class="hljs-string">&#x27;\\u&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            arr.append(uni_map[code])<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(e)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(arr))<br></code></pre></td></tr></table></figure><p>②：获取response之后，我们添加将base64写入ttf和xml的过程。（目的是保证出错时我们能查看xml，分析为什么没有对应的unicode编码的name值）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 解码(base64参数都是unicode编码后的串, 所以str先得encode), 解码针对的是base64_str编码成unicode后的bytes</span><br>    data = base64.b64decode(base64_str.encode())<br>    <span class="hljs-comment"># 写出为 .ttf</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./font-puzzle-test2/font-puzzle-2.ttf&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(data)<br>    <span class="hljs-comment"># 将font-puzzle-2.ttf转为xml文件</span><br>    font = TTFont(<span class="hljs-string">&#x27;./font-puzzle-test2/font-puzzle-2.ttf&#x27;</span>)<br>    font.saveXML(<span class="hljs-string">&#x27;./font-puzzle-test2/font-puzzle-2.xml&#x27;</span>)<br><br>    <span class="hljs-comment"># 现在的data依旧是unicode编码的bytes类型, 转化为io流, 避免写文件过程</span><br>    fio = io.BytesIO(data)<br>    font = TTFont(fio)<br>    glyph_order = font.getGlyphOrder()<br></code></pre></td></tr></table></figure><p>开始调试：</p><p><img src="https://img.lsycai.top/glidedsky/font-non-6.8.png" alt="字体反爬-6.8"></p><p>这时数据已经刷新到ttf、xml文件中了，我们进xml文件进行查看：</p><p><img src="https://img.lsycai.top/glidedsky/font-non-6.9.png" alt="字体反爬-6.9"></p><p>最后需要特别注意的是：</p><p><img src="https://img.lsycai.top/glidedsky/font-non-6.10.png" alt="字体反爬-6.10"></p><blockquote><p>修改后的代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> env <span class="hljs-keyword">import</span> Env<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> fontTools.ttLib <span class="hljs-keyword">import</span> TTFont<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><span class="hljs-keyword">import</span> io<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">将源码中的汉字转化为真实的数字</span><br><span class="hljs-string">    src_str: 如&#x27;随成成&#x27; --&gt; 211</span><br><span class="hljs-string">    uni_map: 源码汉字 --&gt; 真实数字 的映射 &#123;&quot;成&quot;: 1, &quot;随&quot;: 2, ...&#125;</span><br><span class="hljs-string">    返回: 真实数字</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_srcstr_realnum</span>(<span class="hljs-params">src_str, uni_map</span>):<br>    arr = []<br>    <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> src_str:<br>        <span class="hljs-comment"># 每个ch都是一个汉字, 将汉字转为unicode编码, 去除串首的\u即为需要的编码</span><br>        uni = ch.encode(<span class="hljs-string">&#x27;unicode-escape&#x27;</span>).decode()<br>        code = uni.replace(<span class="hljs-string">&#x27;\\u&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        arr.append(uni_map[code])<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(arr))<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">获取从源码中的汉字到见到的数字的映射</span><br><span class="hljs-string">    返回: 当前页响应, name(unicode去除&#x27;uni&#x27;)-&gt;真实数字 的映射 如, (response, &#123;&#x27;7bd9&#x27;: &#x27;0&#x27;, &#x27;9716&#x27;: &#x27;1&#x27;, ...&#125;)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_response_and_unimap</span>(<span class="hljs-params">page</span>):<br>    url = <span class="hljs-string">f&quot;http://www.glidedsky.com/level/web/crawler-font-puzzle-2?page=<span class="hljs-subst">&#123;page&#125;</span>&quot;</span><br><br>    response = session.get(url, headers=env.headers)<br><br>    base64_str = re.search(<span class="hljs-string">&#x27;base64,(.*?)[)]&#x27;</span>, response.text).group(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># 解码(base64参数都是unicode编码后的串, 所以str先得encode), 解码针对的是base64_str编码成unicode后的bytes</span><br>    data = base64.b64decode(base64_str.encode())<br><br>    <span class="hljs-comment"># 现在的data依旧是unicode编码的bytes类型, 转化为io流, 避免写文件过程</span><br>    fio = io.BytesIO(data)<br>    font = TTFont(fio)<br>    glyph_order = font.getGlyphOrder()<br>    <span class="hljs-comment"># cmap的结构 &#123; code: name, ... &#125;  注意: cmap中的code是10进制</span><br>    cmap = font.getBestCmap()<br>    name_id_map = &#123;&#125;<br>    <span class="hljs-comment"># 解析GlyphOrder中的&lt;GlyphID id=&quot;&quot; name=&quot;&quot;&gt; 并组成 &#123; &quot;name&quot;: &quot;id-1&quot;... &#125;</span><br>    <span class="hljs-keyword">for</span> glyph_name <span class="hljs-keyword">in</span> glyph_order:<br>        <span class="hljs-comment"># 现在还只是 name: id 映射</span><br>        name_id_map[glyph_name] = <span class="hljs-built_in">str</span>(font.getGlyphID(glyph_name) - <span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 定义 code_id_map &#123;code: id, ...&#125;</span><br>    code_id_map = &#123;&#125;<br>    <span class="hljs-comment"># 遍历cmap, 得到 code_ip_map &#123;code: id&#125;</span><br>    <span class="hljs-keyword">for</span> code <span class="hljs-keyword">in</span> cmap:<br>        <span class="hljs-comment"># 将code转化为16进制</span><br>        code_id_map[<span class="hljs-built_in">hex</span>(code).replace(<span class="hljs-string">&#x27;0x&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)] = name_id_map[cmap[code]]<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;源码汉字unicode码 -&gt; 可见数字: &#x27;</span>, code_id_map)<br>    <span class="hljs-keyword">return</span> code_id_map, response<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">获取当前页真实的数字和, 一次请求一页, 一页内的数字 映射不会变的</span><br><span class="hljs-string">    page: 第几页数据</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_page_sum</span>(<span class="hljs-params">page</span>):<br>    uni_map, response = get_response_and_unimap(page)<br>    <span class="hljs-comment"># 获取每一个数字框</span><br>    html = etree.HTML(response.text)<br>    div_list = html.xpath(<span class="hljs-string">&#x27;//div[@class=&quot;card-body&quot;]//div[@class=&quot;col-md-1&quot;]&#x27;</span>)<br><br>    <span class="hljs-comment"># 每页和</span><br>    page_total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> div <span class="hljs-keyword">in</span> div_list:<br>        <span class="hljs-comment"># 一个数字串</span><br>        s = <span class="hljs-built_in">str</span>(div.xpath(<span class="hljs-string">&#x27;normalize-space(./text())&#x27;</span>))<br>        <span class="hljs-comment"># 分别解析, 如&#x27;231&#x27; -&gt; 231</span><br>        page_total += parse_srcstr_realnum(s, uni_map)<br><br>    <span class="hljs-keyword">return</span> page_total<br><br><br>env = Env()<br>env.login()<br>session = env.session<br><br><span class="hljs-comment"># 总和</span><br>total = <span class="hljs-number">0</span><br><span class="hljs-comment"># 定义和</span><br><span class="hljs-keyword">for</span> page_num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1001</span>):<br>    total += get_page_sum(page_num)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;前 <span class="hljs-subst">&#123;page_num&#125;</span> 页和为 <span class="hljs-subst">&#123;total&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="CSS反爬-1"><a href="#CSS反爬-1" class="headerlink" title="CSS反爬-1"></a>CSS反爬-1</h1><p>每次刷新class都会重置，挑其中一次分析，每次分析的时候的css都要匹配本次显示的页面。</p><blockquote><p>以下分析有错！①可以选择不看，直接看错误分析 + 重新讨论。②选择看错误的分类讨论，看下如何犯错的。</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 分类讨论(取了少数几个例子):</span><br><br>  ## div.col-md-1 内只有一个div(::before) 直接获取content即为具体内容<br><span class="hljs-code">    .Lg20BXy &#123; float:left &#125; .Lg20BXy:before &#123; content:&quot;256&quot; &#125; .Lg20BXy &#123; letter-spacing:0.4em &#125;</span><br><span class="hljs-code"></span><br>  ## div.col-md-1 内有4个div 有1个div的class为透明 如源码中为 9 6 7 2  实际显示为 276<br><span class="hljs-code">    9: .mk0GYspY &#123; float:left &#125; .mk0GYspY &#123; width:1em &#125; .mk0GYspY &#123; margin-right:-1em &#125;   .mk0GYspY &#123; opacity:0 &#125;</span><br><span class="hljs-code">    6: .kXr1Xjjpn &#123; position:relative &#125; .kXr1Xjjpn &#123; float:left &#125; .kXr1Xjjpn &#123; width:1em &#125; .kXr1Xjjpn &#123; left:2em &#125;</span><br><span class="hljs-code">    7: .Miuk2yGt &#123; float:left &#125;  .Miuk2yGt &#123; width:1em &#125;</span><br><span class="hljs-code">    2: .sX3iaG &#123; position:relative &#125; .sX3iaG &#123; float:left &#125; .sX3iaG &#123; width:1em &#125; .sX3iaG &#123; left:-2em &#125;</span><br><span class="hljs-code">  规律：顺序遍历, left:2em &gt; 0 就在&#x27;&#x27;末尾插入, left:-2em &lt; 0 就在 &#x27;&#x27;开头插入, 不存在&#x27;left:&#x27;和&#x27;opacity:0&#x27;, 就直接保持&#x27;&#x27;末尾插入</span><br><span class="hljs-code"></span><br>  ## div.col-md-1 内有3个div(正常情况) 如源码中为 2 9 4  实际显示为294, 这种直接提取即可<br><span class="hljs-code">    2: .pRwyq22qBP &#123; float:left &#125; .pRwyq22qBP &#123; width:1em &#125;</span><br><span class="hljs-code">    9: .fyM23XHiCE &#123; float:left &#125; .fyM23XHiCE &#123; width:1em &#125;</span><br><span class="hljs-code">    4: .BTYOy24xKA &#123; float:left &#125; .BTYOy24xKA &#123; width:1em &#125;</span><br><span class="hljs-code">  规律: 按照第二种情况即可（相当于第二种情况中: 所有数字都是 7 ）</span><br><span class="hljs-code"></span><br>  ## div.col-md-1 内有2个div 有一个div<span class="hljs-strong">**包含数字**</span>但会设置完全透明，另一个div使用::before添加content, 这个div的情况就和第1种情况相同了<br></code></pre></td></tr></table></figure><p>综上，①和④可以合并为，div.col-md-1内部只要有div.xpath(‘.&#x2F;div&#x2F;text()’)为空值，那么这个div内部就必定是使用了伪元素选择器，我们就能直接获取content。</p><p>②和③也可以合并：②不管透明的那个元素后，就变为了③这种情况了。</p><p>至于生成的style直接从源码的&lt;style&gt;中获取即可，用正则验证具体的值存不存在。</p><blockquote><p> 之前考虑有错😭，例子太片面，下意识认为是“子绝父相”，以倍数获取自生位置，实际错误很大！！！！！！。</p></blockquote><p>看以下例子：</p><p><img src="https://img.lsycai.top/glidedsky/css-non-7.1.png" alt="CSS反爬-7.1"></p><p>现在才认识到相对定位的问题。</p><p>现在开始重新分析：</p><ol><li>首先得认识到，div包含四个子div和包含三个子div是相同的，区别仅是它存在<code>margin-right</code>和<code>opacity</code>的区别（个人觉得等同于：display: none;），只不过得<mark class="hl-label green">注意</mark> 这个透明元素的位置，本题中一直都是处于div的第一个，所以不会影响到<mark class="hl-label green">之后三个div个顺序排列</mark> 。</li></ol><p><img src="https://img.lsycai.top/glidedsky/css-non-7.2.png" alt="CSS反爬-7.2"></p><ol start="2"><li>还发现有的div，有position: relative，有的div没有。</li></ol><p>这是都有的：</p><p><img src="https://img.lsycai.top/glidedsky/css-non-7.3.png" alt="CSS反爬-7.3"></p><p>这是存在没有的：</p><p><img src="https://img.lsycai.top/glidedsky/css-non-7.4.png" alt="CSS反爬-7.4"></p><p>现在可以看出：div.col-md-1的孩子div的顺序就是原始顺序，这个顺序加上position: relative; left: xem 之后，就变为了新顺序，当然，这个过程中，不存在position: relative 样式的就保留原位置。</p><ol start="3"><li>孩子为4个div的同理，第一个div因为是隐形的，当作没看见即可，同样也当3个div处理，<mark class="hl-label blue">但是</mark> ，在隐形元素之后位置的元素得位置得提前一个。（如果它之前有2个隐形元素，那么它的index也得提前2，这才是最初排除隐形元素之后，该元素应该在的位置）。</li><li>伪元素选择器情况：</li></ol><p><img src="https://img.lsycai.top/glidedsky/css-non-7.5.png" alt="CSS反爬-7.5"></p><mark class="hl-label green">补充</mark> : 过程中报错，之后还发现了值div.col-md-1的孩子存在2个的情况，都是有效数字，请注意。<p><img src="https://img.lsycai.top/glidedsky/css-non-7.6.png" alt="CSS反爬-7.6"></p><blockquote><p>修正代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">css反爬-1</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> env <span class="hljs-keyword">import</span> Env<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><br>env = Env()<br>env.login()<br>session = env.session<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">判断一个元素是否为透明元素</span><br><span class="hljs-string">    clazz: 该div的class</span><br><span class="hljs-string">    style: 页面总style层叠样式表</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_opacity</span>(<span class="hljs-params">clazz, style</span>):<br>    opacity = re.search(clazz + <span class="hljs-string">&#x27; \\&#123; opacity:0 \\&#125;&#x27;</span>, style)<br>    <span class="hljs-keyword">return</span> opacity <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">解析 div.col-md-1 这个div, 返回真实数据(的字符串形式)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_div</span>(<span class="hljs-params">div, style, test_text</span>):<br>    children = div.xpath(<span class="hljs-string">&#x27;./div&#x27;</span>)<br>    <span class="hljs-comment"># 伪元素选择器情况: 因为页面每个div中都是要么包含一个数字、要么为空值, 所以xpath(&#x27;text()&#x27;)得到的结果的列表长度无非就是 0或1, 0表示没有内容</span><br>    <span class="hljs-keyword">for</span> index, child <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(children):<br>        <span class="hljs-comment"># 长度为0 说明这个div就是 &lt;div&gt;::before&lt;/div&gt;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(child.xpath(<span class="hljs-string">&#x27;./text()&#x27;</span>)) == <span class="hljs-number">0</span>:<br>            <span class="hljs-comment"># 从style样式表中将 child 这个div的class值对应的 content 给取出来  如: UFihK6LyIh:before &#123; content:&quot;240&quot; &#125; 将240找出</span><br>            <span class="hljs-keyword">return</span> re.search(child.attrib[<span class="hljs-string">&#x27;class&#x27;</span>] + <span class="hljs-string">&#x27;:before \\&#123; content:&quot;(\\d+)&quot; \\&#125;&#x27;</span>, style).group(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># 接下来是孩子有3/4个的处理 注意: 在隐形元素之后出现的div元素它的index都得减去它之前隐形元素出现的个数, 才是该div的初始位置</span><br>    opacity_count = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># res装最终结果 最多之支持4位数字</span><br>    res = [-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>]<br>    <span class="hljs-comment"># index能记录当前div在源码中的索引</span><br>    <span class="hljs-keyword">for</span> index, child <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(children):<br>        <span class="hljs-comment"># 类名</span><br>        clazz = child.attrib[<span class="hljs-string">&#x27;class&#x27;</span>]<br><br>        <span class="hljs-comment"># 判断当前元素是否为透明元素</span><br>        <span class="hljs-keyword">if</span> is_opacity(clazz, style):<br>            opacity_count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">continue</span><br><br>        <span class="hljs-comment"># 非透明元素, 先看是否有position: relative</span><br>        relative = re.search(clazz + <span class="hljs-string">&#x27; \\&#123; position:relative \\&#125;&#x27;</span>, style)<br><br>        <span class="hljs-comment"># 当前div的值</span><br>        val = child.xpath(<span class="hljs-string">&#x27;./text()&#x27;</span>)[<span class="hljs-number">0</span>]<br>        <span class="hljs-comment"># 不存在的话定位, 就是原位置, 但是得刨去隐藏元素站的位置</span><br>        <span class="hljs-keyword">if</span> relative <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            res[index - opacity_count] = val<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 存在定位就使用当前index加上left:xem 的值, 先获取left:xem  注意search (:?)</span><br>            offset = re.search(clazz + <span class="hljs-string">&#x27; \\&#123; left:(-?\\d)em \\&#125;&#x27;</span>, style).group(<span class="hljs-number">1</span>)<br>            res[index + <span class="hljs-built_in">int</span>(offset) - opacity_count] = val<br><br>    <span class="hljs-comment"># try:</span><br>    r = <span class="hljs-string">&#x27;&#x27;</span>.join([i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> res <span class="hljs-keyword">if</span> i != -<span class="hljs-number">1</span>])<br>    <span class="hljs-comment"># except Exception as e:</span><br>    <span class="hljs-comment">#     print(e)</span><br>    <span class="hljs-keyword">return</span> r<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">获取每一页数字和</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_page_sum</span>(<span class="hljs-params">page_num</span>):<br>    url = <span class="hljs-string">f&quot;http://www.glidedsky.com/level/web/crawler-css-puzzle-1?page=<span class="hljs-subst">&#123;page_num&#125;</span>&quot;</span><br>    response = session.get(url, headers=env.headers)<br>    html = etree.HTML(response.text)<br><br>    div_list = html.xpath(<span class="hljs-string">&#x27;//div[@class=&quot;card-body&quot;]//div[@class=&quot;col-md-1&quot;]&#x27;</span>)<br>    <span class="hljs-comment"># 浏览器中生成的样式</span><br>    style = html.xpath(<span class="hljs-string">&#x27;normalize-space(//style/text())&#x27;</span>)<br>    <span class="hljs-comment"># 每页和</span><br>    page_total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> div <span class="hljs-keyword">in</span> div_list:<br>        <span class="hljs-comment"># 解析div</span><br>        page_total += <span class="hljs-built_in">int</span>(parse_div(div, style, response.text))<br>    <span class="hljs-keyword">return</span> page_total<br><br><br><span class="hljs-comment"># 总和</span><br>total = <span class="hljs-number">0</span><br><span class="hljs-comment"># 定义和</span><br><span class="hljs-keyword">for</span> page_num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1001</span>):<br>    total += get_page_sum(page_num)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;前 <span class="hljs-subst">&#123;page_num&#125;</span> 页和为 <span class="hljs-subst">&#123;total&#125;</span>&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h1 id="雪碧图反爬-1"><a href="#雪碧图反爬-1" class="headerlink" title="雪碧图反爬-1"></a>雪碧图反爬-1</h1><p>页面结构全是 <code>div.col-md-1</code> 中包含2&#x2F;3个div，class都是随机串 + ‘ sprite’， 而’sprite’这个样式的<code>background-image: url()</code>包含base64串。</p><p>多刷新几次网页可以发现每次雪碧图中每个数字大小有差异，那么它<mark class="hl-label orange">background-position-x</mark> 的值就有一定差异，可以观察到同一个数字偏移的’x’值相同，并且因为原图片中数字都是从左到右从小到大排列的，我们可以获取当前页所有携带’sprite’样式的div，每一个div都有一个随机的class，如 ‘qaz’ 它的position-x为-12，’wsx’它的position-x为-23，’edc’的postion-x为0。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;qaz&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">-12</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;wsx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">-23</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;edc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br>↓<br><span class="hljs-punctuation">[</span> (<span class="hljs-string">&quot;qaz&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-12</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;wsx&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-23</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;edc&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span>) <span class="hljs-punctuation">]</span><br><br>d_order = sorted(字典.items()<span class="hljs-punctuation">,</span>key=lambda x<span class="hljs-punctuation">:</span>x<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>reverse=True)<br>或者<br>列表.sort(key=lambda x<span class="hljs-punctuation">:</span>x<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> reverse=True)  # 这个列表是上面 ↓ 的那个<br></code></pre></td></tr></table></figure><p>将值进行顺序排列，得到</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span> <span class="hljs-string">&quot;edc&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;qaz&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;wsx&quot;</span> <span class="hljs-punctuation">]</span><br>或者<br><span class="hljs-punctuation">[</span> (<span class="hljs-string">&quot;edc&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;qaz&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-12</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;wsx&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-23</span>) <span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>那么接下来再顺序解析每个div时，就能根据它的<strong>class</strong>拿到对应的<strong>数字</strong>了。</p><blockquote><p>顺序排列取索引为数字的思维出了点问题，因为之前只注意到了相同数字的 postion-x 是相同的，但是没注意到尽管 position-x 想通了，但是它们的 class 依旧不是同一个！！！</p></blockquote><p><img src="https://img.lsycai.top/glidedsky/sprite-non-8.1.png" alt="雪碧图反爬-8.1"></p><p>重新考虑如下结构（<mark class="hl-label orange">qaz</mark> 和<mark class="hl-label orange">rfv</mark> 肯定都代表一个数字，只是class不同）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;qaz&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">-12</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;wsx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">-23</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;edc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;rfv&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-12</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>我们直接构建上述字<mark class="hl-label green">注意</mark> 典即可。</p><p>这种搜索position-x逆序排列，有个巨大漏：</p><p><img src="https://img.lsycai.top/glidedsky/sprite-non-8.2.png" alt="雪碧图反爬-8.2"></p><blockquote><p>错误代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">爬虫-雪碧图-1</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> env <span class="hljs-keyword">import</span> Env<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-comment"># 调用封装的登陆环境</span><br>env = Env()<br>session = env.login()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">源码中通过解析style, 返回</span><br><span class="hljs-string">返回值1: &#123; &quot;qaz&quot;: &quot;-12&quot;, &quot;wsx&quot;: &quot;0&quot;, &quot;rfv&quot;: &quot;-12&quot;, ...&#125;</span><br><span class="hljs-string">返回值2: [ &quot;0&quot;, &quot;-12&quot; ]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_clazzs_num_dict</span>(<span class="hljs-params">style</span>):<br>    <span class="hljs-comment"># res结构如下: [(&#x27;fDn6AFGqT&#x27;, &#x27;-23&#x27;), (&#x27;brq23DUc&#x27;, &#x27;-36&#x27;), ...]</span><br>    class_num_dict = re.findall(<span class="hljs-string">&#x27;.([0-9a-zA-Z]+) &#123; background-position-x:(-?\\d+)px &#125;&#x27;</span>, style)<br>    class_num_dict = <span class="hljs-built_in">dict</span>(class_num_dict)<br><br>    <span class="hljs-comment"># 对num逆序排序</span><br>    <span class="hljs-comment"># 先去重</span><br>    offset_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(class_num_dict.values()))<br>    <span class="hljs-comment"># 再根据offset数值进行排序</span><br>    offset_list.sort(key=<span class="hljs-keyword">lambda</span> item: <span class="hljs-built_in">int</span>(item), reverse=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-built_in">print</span>(class_num_dict)<br>    <span class="hljs-built_in">print</span>(offset_list)<br><br>    <span class="hljs-keyword">return</span> class_num_dict, offset_list<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">获取每一页数字和</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_page_sum</span>(<span class="hljs-params">page_num</span>):<br>    url = <span class="hljs-string">f&quot;http://www.glidedsky.com/level/web/crawler-sprite-image-1?page=<span class="hljs-subst">&#123;page_num&#125;</span>&quot;</span><br>    response = session.get(url, headers=env.headers)<br>    <span class="hljs-comment"># 获取每一个数字框</span><br>    html = etree.HTML(response.text)<br>    div_list = html.xpath(<span class="hljs-string">&#x27;//div[@class=&quot;card-body&quot;]//div[@class=&quot;col-md-1&quot;]&#x27;</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span>*<span class="hljs-number">100</span>)<br>    <span class="hljs-built_in">print</span>(response.text)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span>*<span class="hljs-number">100</span>)<br><br>    <span class="hljs-comment"># css样式表字符串</span><br>    style = html.xpath(<span class="hljs-string">&#x27;normalize-space(//style/text())&#x27;</span>)<br>    <span class="hljs-comment"># 得到 class -&gt; num 的字典</span><br>    clazz_num_dict, offset_list = get_clazzs_num_dict(style)<br>    <span class="hljs-comment"># 每页和</span><br>    page_total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> div_col <span class="hljs-keyword">in</span> div_list:<br>        <span class="hljs-comment"># 一个div.col-md-1内有length个子div(即数字是length位数)</span><br>        length = <span class="hljs-built_in">len</span>(div_col)<br>        one = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, length):<br>            <span class="hljs-comment"># 如class=&quot;Fp0PceYg sprite&quot; 应该只要Fp0PceYg</span><br>            clazz = div_col[i].attrib[<span class="hljs-string">&#x27;class&#x27;</span>]<br>            clazz = clazz[:clazz.index(<span class="hljs-string">&#x27; &#x27;</span>)]<br>            <span class="hljs-comment"># clazz_num_dict 中, 键为class, 值为offset</span><br>            offset = clazz_num_dict[clazz]<br>            <span class="hljs-comment"># 百位乘100 十位乘10 个位乘1</span><br>            one += offset_list.index(offset) * <span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>, length-i-<span class="hljs-number">1</span>)<br><br>        <span class="hljs-comment"># 加这一个数</span><br>        <span class="hljs-built_in">print</span>(one)<br>        page_total += one<br><br>    <span class="hljs-keyword">return</span> page_total<br><br><br><span class="hljs-comment"># 总和</span><br>total = <span class="hljs-number">0</span><br><span class="hljs-comment"># 定义和</span><br><span class="hljs-comment"># for page_num in range(1, 1001):</span><br><span class="hljs-keyword">for</span> page_num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>):<br>    total += get_page_sum(page_num)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;前 <span class="hljs-subst">&#123;page_num&#125;</span> 页和为 <span class="hljs-subst">&#123;total&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>所以说明：之前的思路全部有问题，参考网上解法后，发现还是得均匀切割图片划分横向10个坐标范围，分别表示[0 ,9]，</p><p>这里能取巧就是将 <code>|position-x| * 10 / 整个图片横向宽度</code> 取整即为数字,注意取最接近的整数(如3.2取3, 3.8取4)</p></blockquote><p>这个算式依旧存在问题,因为不同的单位数字还存在一个不同的宽度！！！！</p><p>以上这个方法是默认图片中一串数字划分比较整齐采用的估算形式，实际并不准确。</p><blockquote><p>下面参考大佬（github搜索&lt;!–swig￼41–&gt;）的像素法，竖线扫描判断黑白，以此划分出每个数字坐标范围。</p></blockquote><p>个人分析：</p><p><img src="https://img.lsycai.top/glidedsky/sprite-non-8.3.png" alt="雪碧图反爬-8.3"></p><p>将断点形成列表（长度为11，包括开始、结尾），那么每顺序2个列表元素就能形成10个区间，那么真实的数字就和这个列表的索引产生联系了。</p><p>重点在于如何扫描分割：遍历横坐标，循环内遍历纵坐标，遍历纵坐标过程出现黑点即表示当前的横坐标就是<code>数字的开始</code>（除0以外，因为 0 总是从 position-x: 0px 开始的）。</p><p><img src="https://img.lsycai.top/glidedsky/sprite-non-8.4.png" alt="雪碧图反爬-8.4"></p><p>如此能得到10个position-x的值，列表追加一个图片宽度即为结果，就合成为总的包含10个区间的判定列表。</p><p>之前的划分方式有错，应该在0结束的时候就开始分隔，因为此时0已经不会再出现了。</p><p>结合页面分析：0偏移为 <mark class="hl-label orange">-7</mark>  时，</p><p><img src="https://img.lsycai.top/glidedsky/sprite-non-8.5.png" alt="雪碧图反爬-8.5"></p><p>0偏移为 <mark class="hl-label orange">-8</mark>  时，就已经消失，0都已经消失了，也就不可能算在0的范围内了。</p><p><img src="https://img.lsycai.top/glidedsky/sprite-non-8.6.png" alt="雪碧图反爬-8.6"></p><p>所以应当按下面这种方法划分。</p><p><img src="https://img.lsycai.top/glidedsky/sprite-non-8.7.png" alt="雪碧图反爬-8.7"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">爬虫-雪碧图-1</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> env <span class="hljs-keyword">import</span> Env<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> io<br><br><span class="hljs-comment"># 调用封装的登陆环境</span><br>env = Env()<br>session = env.login()<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">生成分隔列表</span><br><span class="hljs-string">    如: [-1, 8, 19, 31, 43, 54, 66, 79, 93, 104, 117]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_split_list</span>(<span class="hljs-params">style</span>):<br>    split = []<br>    <span class="hljs-comment"># 获取图片的尺寸</span><br>    base64_bytes = base64.b64decode(re.search(<span class="hljs-string">&#x27;base64,(.*?)\&quot;&#x27;</span>, style).group(<span class="hljs-number">1</span>))<br>    fio = io.BytesIO(base64_bytes)<br>    img = Image.<span class="hljs-built_in">open</span>(fio)<br>    <span class="hljs-comment"># 获取像素集</span><br>    pixels = img.load()<br>    <span class="hljs-comment"># 前一列上 全白</span><br>    last_x_all_white = <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># x 表示从左到右</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(img.width):<br>        <span class="hljs-comment"># 当前列全为白色</span><br>        current_x_all_white = <span class="hljs-literal">True</span><br>        <span class="hljs-comment"># y 表示从上到下</span><br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(img.height):<br>            <span class="hljs-comment"># print(f&#x27;&#123;x,y&#125;: &#x27;, pixels[x, y])</span><br>            <span class="hljs-comment"># rgb和等于255*3, 则为白色, 不等则不为白色</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span>(pixels[x, y][:<span class="hljs-number">3</span>]) != <span class="hljs-number">255</span> * <span class="hljs-number">3</span>:<br>                <span class="hljs-comment"># 当前列存在 非白色</span><br>                current_x_all_white = <span class="hljs-literal">False</span><br>                <span class="hljs-keyword">break</span><br><br>        <span class="hljs-comment"># 一列结束 若current_x_all_white还为True 那么说明当前列全为白色</span><br>        <span class="hljs-keyword">if</span> current_x_all_white:<br>            <span class="hljs-comment"># 当前列全白色, 并且上一列存在黑</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> last_x_all_white:<br>                split.append(x)<br><br>        <span class="hljs-comment"># 进行下一列之前 last_x_all_white就得根据当前列重新赋值</span><br>        last_x_all_white = current_x_all_white<br><br>    <span class="hljs-comment"># 开头插入-1 因为只记录了0的结束 没有记录开始</span><br>    split.insert(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 赋值最后一个为图片宽度</span><br>    split[<span class="hljs-built_in">len</span>(split) - <span class="hljs-number">1</span>] = img.width<br><br>    <span class="hljs-keyword">return</span> split<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">源码中通过解析style, 构建 class -&gt; offset </span><br><span class="hljs-string">返回值结构: &#123; &quot;qaz&quot;: &#x27;-12&#x27;, &quot;wsx&quot;: &#x27;0&#x27;, &quot;rfv&quot;: &#x27;-12&#x27;, ...&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_clazzs_num_dict</span>(<span class="hljs-params">style</span>):<br>    <span class="hljs-comment"># findall结构如下: [(&#x27;qaz&#x27;, &#x27;-12&#x27;), (&#x27;wsx&#x27;, &#x27;0&#x27;), (&#x27;rfv&#x27;: &#x27;-12&#x27;) ...]</span><br>    <span class="hljs-comment"># 使用dict构建如下字典 &#123; &quot;qaz&quot;: &quot;-12&quot;, &quot;wsx&quot;: &quot;0&quot;, &quot;rfv&quot;: &quot;-12&quot;, ...&#125;</span><br>    class_num_dict = <span class="hljs-built_in">dict</span>(re.findall(<span class="hljs-string">&#x27;.([0-9a-zA-Z]+) &#123; background-position-x:(-?\\d+)px &#125;&#x27;</span>, style))<br>    <span class="hljs-comment"># 将值转为int 并取绝对值</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> class_num_dict:<br>        class_num_dict[_] = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(class_num_dict[_]))<br>    <span class="hljs-keyword">return</span> class_num_dict<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">获取每一页数字和</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_page_sum</span>(<span class="hljs-params">page_num</span>):<br>    url = <span class="hljs-string">f&quot;http://www.glidedsky.com/level/web/crawler-sprite-image-1?page=<span class="hljs-subst">&#123;page_num&#125;</span>&quot;</span><br>    response = session.get(url, headers=env.headers)<br>    <span class="hljs-comment"># 获取每一个数字框</span><br>    html = etree.HTML(response.text)<br>    div_list = html.xpath(<span class="hljs-string">&#x27;//div[@class=&quot;card-body&quot;]//div[@class=&quot;col-md-1&quot;]&#x27;</span>)<br><br>    <span class="hljs-comment"># css样式表字符串</span><br>    style = html.xpath(<span class="hljs-string">&#x27;normalize-space(//style/text())&#x27;</span>)<br>    <span class="hljs-comment"># 得到 class -&gt; offset 的字典</span><br>    class_num_dict = get_clazzs_num_dict(style)<br>    <span class="hljs-comment"># 得到分隔列表</span><br>    split_list = get_split_list(style)<br>    <span class="hljs-comment"># 每页和</span><br>    page_total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> div_col <span class="hljs-keyword">in</span> div_list:<br>        <span class="hljs-comment"># 一个数包含多少位</span><br>        length = <span class="hljs-built_in">len</span>(div_col)<br>        num = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, length):<br>            <span class="hljs-comment"># 如class=&quot;Fp0PceYg sprite&quot; 应该只要Fp0PceYg</span><br>            clazz = div_col[_].attrib[<span class="hljs-string">&#x27;class&#x27;</span>]<br>            clazz = clazz[:clazz.index(<span class="hljs-string">&#x27; &#x27;</span>)]<br>            <span class="hljs-comment"># clazz_num_dict 中, 键为class, 值为偏移</span><br>            offset = class_num_dict[clazz]<br>            <span class="hljs-comment"># 获得真实数字n</span><br>            <span class="hljs-keyword">for</span> index, split <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(split_list):<br>                <span class="hljs-comment"># 当offset为0 split为-1 这才能判断成功</span><br>                <span class="hljs-keyword">if</span> offset &lt; split:<br>                    n = index - <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">break</span><br>            num += n * <span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>, length - _ - <span class="hljs-number">1</span>)<br><br>        <span class="hljs-comment"># 加这一个数, 每页有12个数嘛</span><br>        page_total += num<br><br>    <span class="hljs-keyword">return</span> page_total<br><br><br><span class="hljs-comment"># 总和</span><br>total = <span class="hljs-number">0</span><br><span class="hljs-comment"># 定义和</span><br><span class="hljs-keyword">for</span> page_num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1001</span>):<br>    total += get_page_sum(page_num)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;前 <span class="hljs-subst">&#123;page_num&#125;</span> 页和为: <span class="hljs-subst">&#123;total&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="爬虫-验证码-1"><a href="#爬虫-验证码-1" class="headerlink" title="爬虫-验证码-1"></a>爬虫-验证码-1</h1><p>分析：</p><p><img src="https://img.lsycai.top/glidedsky/veri-9.1.png" alt="验证码-9.1"></p><p><img src="https://img.lsycai.top/glidedsky/veri-9.2.png" alt="验证码-9.2"></p><p>滑动按钮应该右移的距离得到了，直接操作滑动按钮右移，即可完成该滑动验证。</p><p>需要注意，验证框是<code>iframe</code>标签，需要 <mark class="hl-label orange">driver.switch_to.frame(frame_element)</mark>  操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">driver.switch_to.frame(iframe_element) <span class="hljs-comment"># 转向到该frame中</span><br><br><span class="hljs-string">&quot;&quot;&quot;操作frame外边的元素需要切换出去&quot;&quot;&quot;</span><br>windows = driver.window_handles<br>driver.switch_to.window(windows[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>注意图片还做了干扰处理：容易看出的有四角、上方</p><p><img src="https://img.lsycai.top/glidedsky/veri-9.3.png" alt="验证码-9.3"></p><p><img src="https://img.lsycai.top/glidedsky/veri-9.4.png" alt="验证码-9.4"></p><p>然后就得给个阈值，看一列有多少个不同的像素点以上，才算到了凹陷块。</p><p>经过测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">第 0 列像素点差异为 39<br>第 1 列像素点差异为 40<br>第 2 列像素点差异为 39<br>第 3 列像素点差异为 40<br>第 4 列像素点差异为 39<br>第 5 列像素点差异为 39<br>第 6 列像素点差异为 36<br>第 7 列像素点差异为 26<br>第 8 列像素点差异为 25<br>第 9 列像素点差异为 37<br>.<br>.<br>.<br>第 204 列像素点差异为 23<br>第 205 列像素点差异为 22<br>第 206 列像素点差异为 23<br>第 207 列像素点差异为 51<br>第 208 列像素点差异为 49<br>第 209 列像素点差异为 39<br>第 210 列像素点差异为 41<br>第 211 列像素点差异为 40<br>第 212 列像素点差异为 40<br>第 213 列像素点差异为 38<br>第 214 列像素点差异为 39<br><br>.<br>.<br>.<br>第 399 列像素点差异为 81<br>第 400 列像素点差异为 61<br>第 401 列像素点差异为 16<br>第 402 列像素点差异为 17<br>第 403 列像素点差异为 16<br>第 404 列像素点差异为 17<br>第 405 列像素点差异为 16<br>第 406 列像素点差异为 17<br><br></code></pre></td></tr></table></figure><p>说明整个图片都是做了混淆处理的！！！</p><p><img src="https://img.lsycai.top/glidedsky/veri-9.5.png" alt="验证码-9.5"></p><p>判断缺口的策略：</p><p>最开始是打算到了某一列，像素差异个数剧增，并且在接下来10列中保持像素差异点超过100，那么判断这个剧增列就是凹陷图的开始。</p><blockquote><p>但是后来发现，不大行！！图片的混淆做的太好了……</p></blockquote><p>后来采用在rgb三个数离（255，255，255）相差都仅小于10，并且一列中有40（因为有时凹陷图左中部有缺口，没缺口的话达到50个应该没问题）个这样的像素点以上，判断这列为凹陷图的开始。</p><p><img src="https://img.lsycai.top/glidedsky/veri-9.6.png" alt="验证码-9.6"></p><blockquote><p>后来策略又换成了</p><p>后来采用在rgb三个数离（255，255，255）相差都大于50时，认定这就是凹陷块开始得位置！！！</p></blockquote><p>确定selenium获取的webelement对象的坐标属性时，发现怎么都对不上号，所以才有接下来的测试selenium的location（x和y值）：</p><p>调试：</p><p><img src="https://img.lsycai.top/glidedsky/veri-9.7.png" alt="验证码-9.7"></p><p>form坐标为（298，212），但是在没调整下面这个设置之前总是对不上号！！！</p><p>注意眼观浏览器多宽的时候，一定要把win10显示设置为100%</p><p><img src="https://img.lsycai.top/glidedsky/veri-9.8.png" alt="验证码-9.8"></p><p>调整之后，能对上号了。</p><p><img src="https://img.lsycai.top/glidedsky/veri-9.9.png" alt="验证码-9.9"></p><p>接下来确保代码中测量的距离都是对的，在以上显示设置设置为100%！！！之后进行测量。</p><p>滑块位置：x偏移是36</p><p><img src="https://img.lsycai.top/glidedsky/veri-9.10.png" alt="验证码-9.10"></p><p>下面是iframe的范围：（图中白色框是我用snipaste截出的 <code>36*89</code> 的矩形）</p><p><img src="https://img.lsycai.top/glidedsky/veri-9.11.png" alt="验证码-9.11"></p><p>下面是图片的范围：</p><p><img src="https://img.lsycai.top/glidedsky/veri-9.12.png" alt="验证码-9.12"></p><p>由此，我们得出，在这里得出的location，是相对于iframe本身的！！！</p><p>还记得之前分析的这个图？</p><p><img src="https://img.lsycai.top/glidedsky/veri-9.13.png" alt="验证码-9.13"></p><p>但由于图片还有个透明四周，这个推理要发生变化。</p><p><img src="https://img.lsycai.top/glidedsky/veri-9.14.png" alt="验证码-9.14"></p><p>滑块相对图片的偏移应该是：x + x2 - x3</p><p>x：图片相对iframe的x</p><p>x2：滑块图片的透明四周宽度（大概有11.5）</p><p>这里x2它原图是136的，现在浏览器中是68的，原图四周宽度为23，按比例计算，浏览器中四周宽度为：68*23-136&#x3D;11.5</p><p><img src="https://img.lsycai.top/glidedsky/veri-9.15.png" alt="验证码-9.15"></p><p>x3：大的验证图片相对iframe有个padding（大概有9.6）</p><p><img src="https://img.lsycai.top/glidedsky/veri-9.16.png" alt="验证码-9.16"></p><p>所以，我们拿到滑块的location[‘x’]后直接减2即可。</p><p>绿线的距离（就是缺口相对于大图片的x位置）：因为获取的链接的图片，分辨率是实际显示的2倍，所以得到绿线之间的距离还得除以2。</p><p>selenium存在点问题，个人修正，不然滑动块移动得很慢！！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">C:\Users\L\AppData\Local\Programs\Python\Python37\Lib\site-packages\selenium\webdriver\common\actions<br></code></pre></td></tr></table></figure><p><img src="https://img.lsycai.top/glidedsky/veri-9.17.png" alt="验证码-9.17"></p><p>成功的标志：存在 <code>show-success</code> 的class的div出现。</p><p><img src="https://img.lsycai.top/glidedsky/veri-9.18.png" alt="验证码-9.18"></p><blockquote><p>代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">爬虫-验证码-1</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver <span class="hljs-keyword">import</span> ActionChains<br><span class="hljs-keyword">from</span> selenium.webdriver.support.wait <span class="hljs-keyword">import</span> WebDriverWait<br><span class="hljs-keyword">from</span> selenium.webdriver.support <span class="hljs-keyword">import</span> expected_conditions <span class="hljs-keyword">as</span> EC<br><span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> random<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SeleniumEnv</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.driver_path = <span class="hljs-string">&#x27;D:\\driver\\89.0\\chromedriver.exe&#x27;</span><br>        self.url = <span class="hljs-string">&#x27;http://www.glidedsky.com/level/web/crawler-captcha-1?page=&#x27;</span><br><br>        self.driver = webdriver.Chrome(self.driver_path)<br>        <span class="hljs-comment"># 参数10表示最长等待10秒, 参数0.5表示0.5秒检查一次规定的标签是否存在</span><br>        self.wait = WebDriverWait(self.driver, <span class="hljs-number">2</span>, <span class="hljs-number">0.5</span>)<br><br>    <span class="hljs-comment"># 登陆</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 登陆</span><br>        self.driver.get(<span class="hljs-string">&quot;http://www.glidedsky.com/login&quot;</span>)<br>        <span class="hljs-comment"># 最大化窗口</span><br>        self.driver.maximize_window()<br>        self.driver.find_element_by_id(<span class="hljs-string">&#x27;email&#x27;</span>).send_keys(<span class="hljs-string">&#x27;ls1229344939@163.com&#x27;</span>)<br>        self.driver.find_element_by_id(<span class="hljs-string">&#x27;password&#x27;</span>).send_keys(<span class="hljs-string">&#x27;lovenowhyly0&#x27;</span>)<br>        self.driver.find_element_by_class_name(<span class="hljs-string">&#x27;btn-primary&#x27;</span>).click()<br>        time.sleep(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># 获取滑动按钮对象</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_slide_button</span>(<span class="hljs-params">self</span>):<br>        time.sleep(<span class="hljs-number">1</span>)<br>        btn = self.driver.find_element_by_id(<span class="hljs-string">&#x27;slideBlock&#x27;</span>)<br>        <span class="hljs-keyword">return</span> btn<br><br>    <span class="hljs-comment"># 获得原图和凹陷图的url元组</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_origin_cover_image</span>(<span class="hljs-params">self</span>):<br>        time.sleep(<span class="hljs-number">1</span>)<br>        slide_bg = self.driver.find_element_by_id(<span class="hljs-string">&#x27;slideBg&#x27;</span>)<br>        <span class="hljs-comment"># 测试(链接总是为空...)</span><br>        <span class="hljs-comment"># print(&#x27;slide_bg: &#x27;, slide_bg)</span><br>        cover_url = slide_bg.get_attribute(<span class="hljs-string">&#x27;src&#x27;</span>)<br>        <span class="hljs-comment"># print(&#x27;property:&#x27;, cover_url)</span><br>        origin_url = cover_url.replace(<span class="hljs-string">&#x27;img_index=1&#x27;</span>, <span class="hljs-string">&#x27;img_index=0&#x27;</span>)<br>        <span class="hljs-comment"># print(&#x27;原来: &#x27;, origin_url)</span><br>        <span class="hljs-comment"># print(&#x27;覆盖: &#x27;, cover_url)</span><br>        <span class="hljs-keyword">return</span> origin_url, cover_url<br><br>    <span class="hljs-comment"># 判断2个像素点 不同返回True</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">point_diff</span>(<span class="hljs-params">self, origin_pixel, cover_pixel, threshold</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(origin_pixel[<span class="hljs-number">0</span>] - cover_pixel[<span class="hljs-number">0</span>]) &gt; threshold \<br>               <span class="hljs-keyword">and</span> <span class="hljs-built_in">abs</span>(origin_pixel[<span class="hljs-number">1</span>] - cover_pixel[<span class="hljs-number">1</span>]) &gt; threshold \<br>               <span class="hljs-keyword">and</span> <span class="hljs-built_in">abs</span>(origin_pixel[<span class="hljs-number">2</span>] - cover_pixel[<span class="hljs-number">2</span>]) &gt; threshold<br><br>    <span class="hljs-comment"># 对比原图和凹陷图, 获取凹陷图相对相对整个图片的x偏移量</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_offset_cover</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 分别是原图和凹陷图的url</span><br>        origin_url, cover_url = self.get_origin_cover_image()<br>        <span class="hljs-comment"># 请求</span><br>        origin_img = Image.<span class="hljs-built_in">open</span>(io.BytesIO(requests.get(origin_url).content))<br>        origin_pixels = origin_img.load()<br>        <span class="hljs-comment"># cover_pixels = Image.open(io.BytesIO(requests.get(cover_url).content)).load()</span><br>        cover_img = Image.<span class="hljs-built_in">open</span>(io.BytesIO(requests.get(cover_url).content))<br>        cover_pixels = cover_img.load()<br><br>        width = cover_img.width<br>        height = cover_img.height<br>        <span class="hljs-comment"># 原图是680*390 浏览器实际显示有340*195左右 最后偏移要除以2 (680/340)</span><br>        <span class="hljs-comment"># 阈值</span><br>        threshold = <span class="hljs-number">50</span><br>        <span class="hljs-comment"># 取巧 因为观察到的结果中 凹陷图在的像素都大于了400像素</span><br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">350</span>, width):<br>            <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, height):<br>                <span class="hljs-comment"># 阈值设置为50吧...  r,g,b值都相差50以上</span><br>                <span class="hljs-keyword">if</span> self.point_diff(origin_pixels[x, y], cover_pixels[x, y], threshold):<br>                    <span class="hljs-comment"># print(f&#x27;原图像素点: &#123;origin_pixels[x, y]&#125;, 凹陷图像素点: &#123;cover_pixels[x, y]&#125;&#x27;)</span><br>                    <span class="hljs-keyword">return</span> x / <span class="hljs-number">2</span><br><br>    <span class="hljs-comment"># 获取滑块相对整个图片的x偏移量</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_offset_slider</span>(<span class="hljs-params">self</span>):<br>        time.sleep(<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># self.wait.until(EC.presence_of_element_located((By.ID, &#x27;slideBlock&#x27;)))</span><br>        slide_block = self.driver.find_element_by_id(<span class="hljs-string">&#x27;slideBlock&#x27;</span>)<br>        <span class="hljs-comment"># 减2 相关说明看笔记</span><br>        slider_x = <span class="hljs-built_in">int</span>(slide_block.location[<span class="hljs-string">&#x27;x&#x27;</span>]) - <span class="hljs-number">2</span><br>        <span class="hljs-comment"># print(slider_x)</span><br>        <span class="hljs-keyword">return</span> slider_x<br><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        验证码验证过程</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">checkout</span>(<span class="hljs-params">self, page_num</span>):<br>        <span class="hljs-keyword">try</span>:<br>            time.sleep(<span class="hljs-number">1</span>)<br>            self.driver.get(self.url + <span class="hljs-built_in">str</span>(page_num))<br>            <span class="hljs-comment"># 注意！！！ 验证模块在iframe标签中</span><br>            <span class="hljs-comment"># 哪个找不到 就在哪个前面加sleep ＞﹏＜</span><br>            time.sleep(<span class="hljs-number">1</span>)<br>            <span class="hljs-comment"># self.wait.until(EC.presence_of_element_located((By.ID, &#x27;tcaptcha_iframe&#x27;)))</span><br>            iframe = self.driver.find_element_by_id(<span class="hljs-string">&#x27;tcaptcha_iframe&#x27;</span>)<br>            self.driver.switch_to.frame(iframe)<br>            <span class="hljs-comment"># 获得滑动按钮</span><br>            slide_btn = self.get_slide_button()<br>            <span class="hljs-comment"># 获取滑块相对整个图片的x偏移量</span><br>            slider_x = self.get_offset_slider()<br>            <span class="hljs-comment"># 获取凹陷图相对相对整个图片的x偏移量</span><br>            cover_x = self.get_offset_cover()<br>            <span class="hljs-comment"># 计算得到按钮向右按动的距离</span><br>            <span class="hljs-comment"># print(f&#x27;cover_x: &#123;cover_x&#125;, slider_x: &#123;slider_x&#125;&#x27;)</span><br>            move_x = cover_x - slider_x<br>            <span class="hljs-comment"># print(&#x27;move_x:&#x27;, move_x)</span><br>            self.move_to_gap(slide_btn, self.get_track(move_x))<br><br>            <span class="hljs-comment"># 用until等太久了</span><br>            success = self.wait.until(EC.presence_of_element_located((By.CLASS_NAME, <span class="hljs-string">&#x27;show-success&#x27;</span>)))<br><br>            <span class="hljs-comment"># 返回是否成功校验</span><br>            <span class="hljs-keyword">return</span> success <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(e)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-comment"># 计算当前页数字和</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_total</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 切出iframe</span><br>        windows = self.driver.window_handles<br>        self.driver.switch_to.window(windows[<span class="hljs-number">0</span>])<br>        div_list = self.driver.find_elements_by_xpath(<span class="hljs-string">&#x27;//div[@class=&quot;card-body&quot;]//div[@class=&quot;col-md-1&quot;]&#x27;</span>)<br><br>        page_total = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> div <span class="hljs-keyword">in</span> div_list:<br>            page_total += <span class="hljs-built_in">int</span>(div.text)<br><br>        <span class="hljs-keyword">return</span> page_total<br><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">       根据偏移量获取移动轨迹</span><br><span class="hljs-string">       :param distance: 偏移量</span><br><span class="hljs-string">       :return: 移动轨迹</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_track</span>(<span class="hljs-params">self, distance</span>):<br>        <span class="hljs-comment"># 移动轨迹</span><br>        track = []<br>        <span class="hljs-comment"># 当前位移</span><br>        current = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 减速阈值</span><br>        mid = distance * <span class="hljs-number">4</span> / <span class="hljs-number">5</span><br>        <span class="hljs-comment"># 计算间隔</span><br>        t = <span class="hljs-number">0.3</span><br>        <span class="hljs-comment"># 初速度</span><br>        v = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> current &lt; distance:<br>            <span class="hljs-keyword">if</span> current &lt; mid:<br>                <span class="hljs-comment"># 加速度为正5</span><br>                a = <span class="hljs-number">5</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 加速度为负3</span><br>                a = -<span class="hljs-number">3</span><br>            <span class="hljs-comment"># 当前速度v1 = v0 + at</span><br>            v = v + a * t<br>            <span class="hljs-comment"># 移动距离x = v0t + 1/2 * a * t^2</span><br>            move = v * t + <span class="hljs-number">1</span> / <span class="hljs-number">2</span> * a * t * t<br>            <span class="hljs-comment"># 当前位移</span><br>            current += move<br>            <span class="hljs-keyword">if</span> current &gt; distance:<br>                track.append(distance - current + move)<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-comment"># 加入轨迹</span><br>            track.append(<span class="hljs-built_in">round</span>(move))<br>            <span class="hljs-comment"># t时间后, 现在的速度</span><br>            v = v + a * t<br><br>        <span class="hljs-comment"># print(f&#x27;track: &#123;track&#125;&#x27;)</span><br>        <span class="hljs-keyword">return</span> track<br><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        拖动滑块到缺口处</span><br><span class="hljs-string">        :param slider: 滑块</span><br><span class="hljs-string">        :param track: 轨迹</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">move_to_gap</span>(<span class="hljs-params">self, slider, track</span>):<br>        ActionChains(self.driver).click_and_hold(slider).perform()<br><br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> track:<br>            ActionChains(self.driver).move_by_offset(xoffset=x, yoffset=<span class="hljs-number">0</span>).perform()<br><br>        time.sleep(random.random())<br>        ActionChains(self.driver).release().perform()<br><br><br>env = SeleniumEnv()<br>env.login()<br><br>total = <span class="hljs-number">0</span><br><span class="hljs-comment"># 访问的页数</span><br>page = <span class="hljs-number">967</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    sign = env.checkout(page)<br><br>    <span class="hljs-comment"># 如果验证失败</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> sign:<br>        fail_count = <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;第 <span class="hljs-subst">&#123;page&#125;</span> 页失败(1)!!!&#x27;</span>)<br>        <span class="hljs-comment"># 重复操作 直到过验证</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            sign = env.checkout(page)<br>            <span class="hljs-keyword">if</span> sign:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;第 <span class="hljs-subst">&#123;page&#125;</span> 页成功(n)!!!&#x27;</span>)<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;第 <span class="hljs-subst">&#123;page&#125;</span> 页失败(n) 又失败<span class="hljs-subst">&#123;fail_count&#125;</span>次!!!&#x27;</span>)<br>                fail_count += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> fail_count &gt; <span class="hljs-number">3</span>:<br>                    <span class="hljs-comment"># 重启浏览器</span><br>                    env.driver.quit()<br>                    env = SeleniumEnv()<br>                    env.login()<br>                    fail_count = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;第 <span class="hljs-subst">&#123;page&#125;</span> 页成功(1)!!!&#x27;</span>)<br>    <span class="hljs-comment"># 获取当前页和</span><br>    <span class="hljs-comment"># 等数字加载完毕</span><br>    time.sleep(<span class="hljs-number">1</span>)<br>    total += env.get_total()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;前<span class="hljs-subst">&#123;page&#125;</span>页和为 <span class="hljs-subst">&#123;total&#125;</span> &#x27;</span>)<br>    page += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> page == <span class="hljs-number">1001</span>:<br>        env.driver.quit()<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">中间总有网络原因...有时连页面都打不开 实在加载不出来, 分了多次测, 大概测了10多次吧...</span><br><span class="hljs-string">我手动操作都还能一直出现 &quot;网络恍惚了一下&quot;/&quot;拼图块半路丢失&quot;  ???</span><br><span class="hljs-string"></span><br><span class="hljs-string">[1, 272] =&gt; 948786 </span><br><span class="hljs-string">怎么服务器还能 internal server error(nginx) 啊...</span><br><span class="hljs-string">[273, 378) =&gt; 368900</span><br><span class="hljs-string"></span><br><span class="hljs-string">T^T</span><br><span class="hljs-string">[378, 1000] =&gt; 2177686</span><br><span class="hljs-string"></span><br><span class="hljs-string">3495372</span><br><span class="hljs-string"></span><br><span class="hljs-string">怀疑是腾讯防水墙有一定的访问限制, 建议每过100页等个10分钟再爬</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>我靠，页面刷新不出来我能咋办啊？</p><p>chrome：</p><p><img src="https://img.lsycai.top/glidedsky/veri-9.19.png" alt="验证码-9.19"></p><p>刷新出来了等自己手动操作也出现这种：</p><p><img src="https://img.lsycai.top/glidedsky/veri-9.20.png" alt="验证码-9.20"></p><p><img src="https://img.lsycai.top/glidedsky/veri-9.21.png" alt="验证码-9.21"></p><h1 id="爬虫-JS加密1"><a href="#爬虫-JS加密1" class="headerlink" title="爬虫-JS加密1"></a>爬虫-JS加密1</h1><blockquote><p>分析</p></blockquote><p>源码中的响应皆为空串：</p><p><img src="https://img.lsycai.top/glidedsky/encry-js-10.1.png" alt="js加密-10.1"></p><p>结合页面响应分析：</p><p><img src="https://img.lsycai.top/glidedsky/encry-js-10.2.png" alt="js加密-10.2"></p><p>数据应该就是异步加载的了，接下来就是模拟异步GET请求了。</p><p>url：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">http://www.glidedsky.com/api/level/web/crawler-javascript-obfuscation-1/items?page=1&amp;t=1617340189&amp;sign=e7c6b4b333bd07e4753288ca683062e925703341<br></code></pre></td></tr></table></figure><p>参数分析：</p><p>page是页数</p><p>t明显是秒级时间戳</p><p><img src="https://img.lsycai.top/glidedsky/encry-js-10.3.png" alt="js加密-10.3"></p><p>sign就是加密身份验证串了，在源码及响应信息中search不到，并且每次都会变化，那么推测是<code>本地js生成</code>。</p><p>调试<code>sha1.js</code>文件：</p><p><img src="https://img.lsycai.top/glidedsky/encry-js-10.4.png" alt="js加密-10.4"></p><p>下一步过后，会发现sign的值就是这个return语句返回的结果。</p><p>可以比较watch窗口中的值，这里只列举了前几个值，可以看到都是和sign相等的，可以说明这个函数就是生成sign的函数，返回值正好有40项！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">t.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">hex</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">finalize</span>();<br>        <span class="hljs-keyword">var</span> t = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h0</span><br>          , h = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h1</span><br>          , s = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h2</span><br>          , i = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h3</span><br>          , e = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h4</span>;<br>        <span class="hljs-keyword">return</span> r[t &gt;&gt; <span class="hljs-number">28</span> &amp; <span class="hljs-number">15</span>] + r[t &gt;&gt; <span class="hljs-number">24</span> &amp; <span class="hljs-number">15</span>] + r[t &gt;&gt; <span class="hljs-number">20</span> &amp; <span class="hljs-number">15</span>] + r[t &gt;&gt; <span class="hljs-number">16</span> &amp; <span class="hljs-number">15</span>] + r[t &gt;&gt; <span class="hljs-number">12</span> &amp; <span class="hljs-number">15</span>] + r[t &gt;&gt; <span class="hljs-number">8</span> &amp; <span class="hljs-number">15</span>] + r[t &gt;&gt; <span class="hljs-number">4</span> &amp; <span class="hljs-number">15</span>] + r[<span class="hljs-number">15</span> &amp; t] + r[h &gt;&gt; <span class="hljs-number">28</span> &amp; <span class="hljs-number">15</span>] + r[h &gt;&gt; <span class="hljs-number">24</span> &amp; <span class="hljs-number">15</span>] + r[h &gt;&gt; <span class="hljs-number">20</span> &amp; <span class="hljs-number">15</span>] + r[h &gt;&gt; <span class="hljs-number">16</span> &amp; <span class="hljs-number">15</span>] + r[h &gt;&gt; <span class="hljs-number">12</span> &amp; <span class="hljs-number">15</span>] + r[h &gt;&gt; <span class="hljs-number">8</span> &amp; <span class="hljs-number">15</span>] + r[h &gt;&gt; <span class="hljs-number">4</span> &amp; <span class="hljs-number">15</span>] + r[<span class="hljs-number">15</span> &amp; h] + r[s &gt;&gt; <span class="hljs-number">28</span> &amp; <span class="hljs-number">15</span>] + r[s &gt;&gt; <span class="hljs-number">24</span> &amp; <span class="hljs-number">15</span>] + r[s &gt;&gt; <span class="hljs-number">20</span> &amp; <span class="hljs-number">15</span>] + r[s &gt;&gt; <span class="hljs-number">16</span> &amp; <span class="hljs-number">15</span>] + r[s &gt;&gt; <span class="hljs-number">12</span> &amp; <span class="hljs-number">15</span>] + r[s &gt;&gt; <span class="hljs-number">8</span> &amp; <span class="hljs-number">15</span>] + r[s &gt;&gt; <span class="hljs-number">4</span> &amp; <span class="hljs-number">15</span>] + r[<span class="hljs-number">15</span> &amp; s] + r[i &gt;&gt; <span class="hljs-number">28</span> &amp; <span class="hljs-number">15</span>] + r[i &gt;&gt; <span class="hljs-number">24</span> &amp; <span class="hljs-number">15</span>] + r[i &gt;&gt; <span class="hljs-number">20</span> &amp; <span class="hljs-number">15</span>] + r[i &gt;&gt; <span class="hljs-number">16</span> &amp; <span class="hljs-number">15</span>] + r[i &gt;&gt; <span class="hljs-number">12</span> &amp; <span class="hljs-number">15</span>] + r[i &gt;&gt; <span class="hljs-number">8</span> &amp; <span class="hljs-number">15</span>] + r[i &gt;&gt; <span class="hljs-number">4</span> &amp; <span class="hljs-number">15</span>] + r[<span class="hljs-number">15</span> &amp; i] + r[e &gt;&gt; <span class="hljs-number">28</span> &amp; <span class="hljs-number">15</span>] + r[e &gt;&gt; <span class="hljs-number">24</span> &amp; <span class="hljs-number">15</span>] + r[e &gt;&gt; <span class="hljs-number">20</span> &amp; <span class="hljs-number">15</span>] + r[e &gt;&gt; <span class="hljs-number">16</span> &amp; <span class="hljs-number">15</span>] + r[e &gt;&gt; <span class="hljs-number">12</span> &amp; <span class="hljs-number">15</span>] + r[e &gt;&gt; <span class="hljs-number">8</span> &amp; <span class="hljs-number">15</span>] + r[e &gt;&gt; <span class="hljs-number">4</span> &amp; <span class="hljs-number">15</span>] + r[<span class="hljs-number">15</span> &amp; e]<br>    &#125;<br></code></pre></td></tr></table></figure><p>刷新，重新调试，看下一步执行什么：</p><p><img src="https://img.lsycai.top/glidedsky/encry-js-10.5.png" alt="js加密-10.5"></p><p><img src="https://img.lsycai.top/glidedsky/encry-js-10.6.png" alt="js加密-10.6"></p><p><img src="https://img.lsycai.top/glidedsky/encry-js-10.7.png" alt="js加密-10.7"></p><p>接下来就是如何的到参数<code>t</code>和参数<code>sign</code>了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p = $(<span class="hljs-string">&#x27;main .container&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;p&#x27;</span>);<br><span class="hljs-keyword">let</span> t = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(($(<span class="hljs-string">&#x27;main .container&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;t&#x27;</span>) - <span class="hljs-number">99</span>) / <span class="hljs-number">99</span>);<br><span class="hljs-keyword">let</span> sign = <span class="hljs-title function_">sha1</span>(<span class="hljs-string">&#x27;Xr0Z-javascript-obfuscation-1&#x27;</span> + t);<br>$.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/api/level/web/crawler-javascript-obfuscation-1/items?page=&#x27;</span> + p + <span class="hljs-string">&#x27;&amp;t=&#x27;</span> + t + <span class="hljs-string">&#x27;&amp;sign=&#x27;</span> + sign, <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-keyword">const</span> list = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data).<span class="hljs-property">items</span>;<br>    $(<span class="hljs-string">&#x27;.col-md-1&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>) &#123;<br>        <span class="hljs-keyword">if</span> (list &amp;&amp; index &lt; list.<span class="hljs-property">length</span>) &#123;<br>            $(<span class="hljs-string">&#x27;.col-md-1&#x27;</span>).<span class="hljs-title function_">eq</span>(index).<span class="hljs-title function_">text</span>(list[index])<br>        &#125;<br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>t就是当前的秒级时间戳</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">time.time()<br></code></pre></td></tr></table></figure><p>sign得调用sha1的函数：参数是<mark class="hl-label +">Xr0Z-javascript-obfuscation-1</mark> ，调用方法是：将sha1.js下载下来，采用js2py，用python动态执行js代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    js加密-1</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> env <span class="hljs-keyword">import</span> Env<br><span class="hljs-keyword">import</span> js2py<br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> json<br><br>env = Env()<br>session = env.login()<br><br><span class="hljs-comment"># 生成js执行环境</span><br>context = js2py.EvalJs()<br><span class="hljs-comment"># python读取js</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;js-obfuscation-1-test/js/sha1.js&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    context.execute(f.read())<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    获得参数t和sign</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_t_and_sign</span>():<br>    <span class="hljs-comment"># 需要提前定义的参数</span><br>    context.t = math.floor(time.time())<br>    <span class="hljs-comment"># 需执行js代码</span><br>    js = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        var sign = sha1(&#x27;Xr0Z-javascript-obfuscation-1&#x27; + t);</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment"># 执行js代码</span><br>    context.execute(js)<br>    <span class="hljs-keyword">return</span> context.t, context.sign<br><br><br><span class="hljs-comment"># 定义 和</span><br>total = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> page_num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1001</span>):<br><br>    t, sign = get_t_and_sign()<br><br>    url = <span class="hljs-string">f&#x27;http://www.glidedsky.com/api/level/web/crawler-javascript-obfuscation-1/items?page=<span class="hljs-subst">&#123;page_num&#125;</span>&amp;t=<span class="hljs-subst">&#123;t&#125;</span>&amp;sign=<span class="hljs-subst">&#123;sign&#125;</span>&#x27;</span><br><br>    response = session.get(url, headers=env.headers)<br><br>    <span class="hljs-comment"># print(json.loads(response.text))</span><br>    nums = json.loads(response.text)[<span class="hljs-string">&#x27;items&#x27;</span>]<br>    total += <span class="hljs-built_in">sum</span>(nums)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;前 <span class="hljs-subst">&#123;page_num&#125;</span> 页数字和为: <span class="hljs-subst">&#123;total&#125;</span>&quot;</span>)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;结果是: <span class="hljs-subst">&#123;total&#125;</span>&quot;</span>)<br><span class="hljs-comment"># 这个运行着就很爽了吖 (•ω•`)  舒服</span><br></code></pre></td></tr></table></figure><h1 id="爬虫-验证码-2"><a href="#爬虫-验证码-2" class="headerlink" title="爬虫-验证码-2"></a>爬虫-验证码-2</h1><p>页面访问好像没有内容了：<a href="http://www.glidedsky.com/level/web/crawler-captcha-2">http://www.glidedsky.com/level/web/crawler-captcha-2</a></p><p><img src="https://img.lsycai.top/glidedsky/veri-11.1.png" alt="验证码-11.1"></p><p>只不过就算做，估计我也没法，猜测都是图形判断或者汉字点击了。</p><h1 id="雪碧图反爬-2"><a href="#雪碧图反爬-2" class="headerlink" title="雪碧图反爬-2"></a>雪碧图反爬-2</h1><p>试了下百度识图（每天能免费用很多次），发现依然会有识别出错的情况！！！！</p><p>找了个类似的代码，自己修改了部分，能实现训练并识别mnist手写数字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    tensorflow2.0实现手写汉字实现: http://blog.itpub.net/69978904/viewspace-2733646/</span><br><span class="hljs-string">    保存模型: https://www.cnblogs.com/piaodoo/p/14124831.html</span><br><span class="hljs-string">    测试tensorflow2实现mnist手写汉字识别</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 一定要放在 import tensorflow 之前才有效 = =</span><br>os.environ[<span class="hljs-string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="hljs-string">&#x27;2&#x27;</span><br><br><span class="hljs-keyword">from</span> tensorflow <span class="hljs-keyword">import</span> keras<br><span class="hljs-keyword">from</span> tensorflow.keras.layers <span class="hljs-keyword">import</span> Flatten, Dense<br><span class="hljs-keyword">from</span> tensorflow.keras.datasets <span class="hljs-keyword">import</span> mnist<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 加载数据集</span><br>(train_images, train_labels), (test_images, test_labels) = mnist.load_data()<br><br><span class="hljs-comment"># 图片每个像素的数值都是在[0, 255]之间，所以归一化要除以255，数据要是浮点数，所以要添加一个小数点</span><br>train_images, test_images = train_images / <span class="hljs-number">255.0</span>, test_images / <span class="hljs-number">255.0</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    重新创建一个model</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">new_model</span>():<br>    <span class="hljs-comment"># 定义模型</span><br>    <span class="hljs-comment"># 搭建一个顺序模型，第一层先将数据展平，原始图片是28x28的灰度图，所以输入尺寸是（28，28），第二层节点数可以自己选择一个合适值，这里用128个节点，激活函数用relu</span><br>    <span class="hljs-comment">#   第三层有多少个种类就写多少，[0, 9]一共有10个数字,所以必须写10，激活函数用softmax</span><br>    model = keras.Sequential([<br>        Flatten(input_shape=(<span class="hljs-number">28</span>, <span class="hljs-number">28</span>)),<br>        Dense(<span class="hljs-number">128</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>        Dense(<span class="hljs-number">10</span>, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>)<br>    ])<br><br>    <span class="hljs-comment"># 指定优化器、损失函数、评价指标</span><br>    model.<span class="hljs-built_in">compile</span>(optimizer=<span class="hljs-string">&#x27;adam&#x27;</span>,<br>                  loss=<span class="hljs-string">&#x27;sparse_categorical_crossentropy&#x27;</span>,<br>                  metrics=[<span class="hljs-string">&#x27;acc&#x27;</span>])<br><br>    <span class="hljs-keyword">return</span> model<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    已存在的model, 加载权重和偏置(方法一: 保存模型的权重和偏置)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_weights_bias</span>(<span class="hljs-params">model</span>):<br>    <span class="hljs-keyword">if</span> os.path.exists(<span class="hljs-string">&#x27;./tensorflow2_mnist_model/weights_bias_model/checkpoint&#x27;</span>):<br>        model.load_weights(<span class="hljs-string">&#x27;./tensorflow2_mnist_model/weights_bias_model/my_model&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;第一次保存权重和偏置吧? 当前模型文件不存在呐! &#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    保存model的权重和偏置</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_weight_bias</span>(<span class="hljs-params">model</span>):<br>    model.save_weights(<span class="hljs-string">&#x27;./tensorflow2_mnist_model/weights_bias_model/my_model&#x27;</span>)<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    训练模型</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_model</span>(<span class="hljs-params">model</span>):<br>    <span class="hljs-comment"># 训练模型</span><br>    model.fit(train_images, train_labels, epochs=<span class="hljs-number">1</span>)<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    保存整个模型(方法二: 直接保存整个模型)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_all_model</span>(<span class="hljs-params">model</span>):<br>    model.save(<span class="hljs-string">&#x27;./tensorflow2_mnist_model/all_model/mnist_weights.h5&#x27;</span>)<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    加载整个模型</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_all_model</span>():<br>    <span class="hljs-keyword">if</span> os.path.exists(<span class="hljs-string">&#x27;./tensorflow2_mnist_model/all_model/mnist_weights.h5&#x27;</span>):<br>        <span class="hljs-keyword">return</span> keras.models.load_model(<span class="hljs-string">&#x27;./tensorflow2_mnist_model/all_model/mnist_weights.h5&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;第一次保存整个模型吧? 当前模型文件不存在呐! &#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><br>model = new_model()<br><span class="hljs-comment"># 方法一: 开始</span><br><span class="hljs-comment"># load_weights_bias(model)</span><br><span class="hljs-comment"># train_model(model)</span><br><span class="hljs-comment"># save_weight_bias(model)</span><br><span class="hljs-comment"># 方法一: 结束</span><br><br><span class="hljs-comment"># 方法二: 开始</span><br>reload_model = load_all_model()<br><span class="hljs-keyword">if</span> reload_model <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>    model = reload_model<br><br>train_model(model)<br>save_all_model(model)<br><span class="hljs-comment"># 方法二: 结束</span><br><br><br><span class="hljs-comment"># 用测试集验证模型效果</span><br>test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Test acc:&#x27;</span>, test_acc)<br><br><span class="hljs-comment"># 将图片输入模型，返回预测结果 (将测试集中的第一张图片输入模型)</span><br>predictions = model.predict(test_images)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;predictions: &#x27;</span>, predictions)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;预测值:&#x27;</span>, np.argmax(predictions[<span class="hljs-number">0</span>]))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;真实值:&#x27;</span>, test_labels[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><blockquote><p>先仿照mnist数据集，将glidedsky上的雪碧图分割成每个小的数字，作为训练集图片，之后再读取图片，构成mnist数据集的数据结构，如此达到最终能识别的目的。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>训练数据：</p><p>在线获取二维雪碧图，用ps切割大的二维雪碧图成小数字图(<a href="https://jingyan.baidu.com/article/9989c746fe0ffef649ecfe5d.html)%EF%BC%8C%E5%B9%B6%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E4%B8%BA18*18%EF%BC%88**%E7%99%BE%E5%BA%A6**%EF%BC%9Ahttps://jingyan.baidu.com/article/9f7e7ec0ecf9676f2815540a.html%EF%BC%8C%E5%B9%B6%E4%B8%94%E8%A6%81%E6%B1%82%E4%B8%BA%E6%96%87%E4%BB%B6%E5%90%8D**%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AD%97%E6%AF%8D%E6%98%AF%E6%95%B0%E5%AD%97**%E5%8D%B3%E5%8F%AF%EF%BC%8C%E5%A6%82&#39;1.12312z.jpg&#39;%E3%80%81&#39;3.(1)jpg&#39;">https://jingyan.baidu.com/article/9989c746fe0ffef649ecfe5d.html)，并批量修改为18*18（**百度**：https://jingyan.baidu.com/article/9f7e7ec0ecf9676f2815540a.html，并且要求为文件名**第一个字母是数字**即可，如&#39;1.12312z.jpg&#39;、&#39;3.(1)jpg&#39;</a></p><p>只不过横向均匀切割还好，但是纵向不行，会打乱数据的完整性，所以最好用代码以像素为基准判断切割好，再用ps统一处理为18*18的训练集（这一步也能用代码完成，所以建议直接用代码下载图片数据集，手动更改文件名作为labels）。</p><p>现在只需，将所有18*18图片数据转化为类似mnist的数据结构进行返回：</p><p><img src="https://img.lsycai.top/glidedsky/sprite-non-12.1.png" alt="雪碧图反爬-12.1"></p><p>images和labels数据分别是三维和一维Tensor。</p><p>然后就能用最上方的训练代码进行训练了。</p><p>后续再多弄点数据集。</p><h2 id="代码实现切割出小图"><a href="#代码实现切割出小图" class="headerlink" title="代码实现切割出小图"></a>代码实现切割出小图</h2><p>横向切割，结果是每一行，没一行内再按照数字最小宽度切割，切出来的图片将分辨率调为18*18就得到了训练图。</p><p>批量重命名：左键加上 ctrl ，多选，选好了再右键重命名：</p><p><img src="https://img.lsycai.top/glidedsky/sprite-non-12.2.png" alt="雪碧图反爬-12.2"></p><p>右键重命名，输入“1”，下图即为结果（很方便啊）：</p><p>用以下代码多生成写训练集，并批量重命名，有耐心一些。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    下载二维雪碧图并实现分割</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> env <span class="hljs-keyword">import</span> Env<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> io<br><br><span class="hljs-comment"># 调用封装的登陆环境</span><br>env = Env()<br>session = env.login()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    获取二维雪碧图</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_sprite</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-comment"># 请求源码</span><br>    response = session.get(url, headers=env.headers)<br><br>    <span class="hljs-comment"># 正则解析base64</span><br>    base64_bytes = base64.b64decode(re.search(<span class="hljs-string">&#x27;base64,(.*?)\&quot;&#x27;</span>, response.text).group(<span class="hljs-number">1</span>))<br><br>    <span class="hljs-comment"># 可以不用写文件, 直接转为Image</span><br>    <span class="hljs-comment"># with open(&#x27;./sprite_img/sprite.png&#x27;, &#x27;wb&#x27;) as f:</span><br>    <span class="hljs-comment">#     f.write(base64_bytes)</span><br><br>    <span class="hljs-keyword">return</span> Image.<span class="hljs-built_in">open</span>(io.BytesIO(base64_bytes))<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    针对每一行的图片进行按列切割, 返回数字的最小宽限集合 如 [(1, 3), (5, 8), ...], 那么横向x 属于 [1, 3] 就是数字0的范围, 一起类推</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_gray_interval</span>(<span class="hljs-params">row_image</span>):<br>    interval_list = []<br><br>    <span class="hljs-comment"># 前一列纯白 为真</span><br>    last_col_all_white = <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># 数字开始x 和 数字结束x (2个变量不能被重复赋值0, 所以放到循环外部)</span><br>    num_start_x = <span class="hljs-number">0</span><br>    num_end_x = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># 遍历每一列, 每一行</span><br>    pixels = row_image.load()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row_image.width):<br>        <span class="hljs-comment"># 当前列纯白为真</span><br>        cur_col_all_white = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row_image.height):<br>            <span class="hljs-comment"># 因为是灰度图片 只以 r 值代表颜色即可</span><br>            <span class="hljs-keyword">if</span> pixels[x, y][<span class="hljs-number">0</span>] != <span class="hljs-number">255</span>:<br>                cur_col_all_white = <span class="hljs-literal">False</span><br><br>        <span class="hljs-comment"># 一列迭代结束后</span><br>        <span class="hljs-comment"># 如果 前一列为全白 and 当前列存在灰</span><br>        <span class="hljs-keyword">if</span> last_col_all_white <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> cur_col_all_white:<br>            num_start_x = x<br>        <span class="hljs-comment"># 如果 前一列存在灰 and 当前列全白</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> last_col_all_white <span class="hljs-keyword">and</span> cur_col_all_white:<br>            num_end_x = x<br>            <span class="hljs-comment"># 添加分段信息</span><br>            interval_list.append((num_start_x, num_end_x))<br><br>        <span class="hljs-comment"># 下一列开始前, 重置 last_col_all_white</span><br>        last_col_all_white = cur_col_all_white<br><br>    <span class="hljs-keyword">return</span> interval_list<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    切割为合理大小, 保存到train_img文件夹下, 作为训练集</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">slice_image</span>(<span class="hljs-params">image</span>):<br>    <span class="hljs-comment"># 每一块的高</span><br>    piece_height = image.height / <span class="hljs-number">10</span><br>    <span class="hljs-comment"># 横向能平均切割, 纵向不能, 用ps横纵平均都是10份试一下就知道了</span><br>    <span class="hljs-comment"># 先纵向平均切割10份 0~9</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        y = i * piece_height<br>        row_image = image.crop((<span class="hljs-number">0</span>, y, image.width, y + piece_height))<br>        <span class="hljs-comment"># 再对每一行的图片进行按列切割</span><br>        interval_list = get_gray_interval(row_image)<br>        <span class="hljs-comment"># 遍历分隔 批量分割 保存数字图片</span><br>        <span class="hljs-keyword">for</span> interval <span class="hljs-keyword">in</span> interval_list:<br>            num_image = row_image.crop((interval[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>, interval[<span class="hljs-number">1</span>], row_image.height))<br>            <span class="hljs-comment"># 重置像素为 18*18 NEAREST: 低质量  BILINEAR: 双线性: BICUBIC: 三次样条插值  ANTIALIAS: 高质量  感觉中间两个效果好一些</span><br>            num_image = num_image.resize((<span class="hljs-number">18</span>, <span class="hljs-number">18</span>), Image.ANTIALIAS)<br>            <span class="hljs-comment"># 暂时随机取名 之后再手动调整为真实数字命名文件</span><br>            num_image.save(<span class="hljs-string">f&#x27;./train_img/<span class="hljs-subst">&#123;random.randint(<span class="hljs-number">11</span>, <span class="hljs-number">1000</span>)&#125;</span>.png&#x27;</span>)<br><br><br>url = <span class="hljs-string">&#x27;http://www.glidedsky.com/level/web/crawler-sprite-image-2?page=1&#x27;</span><br>image = get_sprite(url)<br>slice_image(image)<br></code></pre></td></tr></table></figure><p>暂时弄这么多训练集：</p><p><img src="https://img.lsycai.top/glidedsky/sprite-non-12.3.png" alt="雪碧图反爬-12.3"></p><p>再弄这么多测试集：</p><p><img src="https://img.lsycai.top/glidedsky/sprite-non-12.4.png" alt="雪碧图反爬-12.4"></p><h2 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h2><p>读取进去的文件名列表，一定记得shuffle一下。</p><p>多训练些数据集，如果对测试结果不满意再重新<code>添加些训练集</code>即可。</p><p>&#x3D; &#x3D;，有些数字形状也太离谱了吧</p><p><img src="https://img.lsycai.top/glidedsky/sprite-non-12.5.png" alt="雪碧图反爬-12.5"></p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>把base64串和预测结果记录，比较，将<code>不同的数字</code>保存为训练集，再次训练。</p><p><img src="https://img.lsycai.top/glidedsky/sprite-non-12.6.png" alt="雪碧图反爬-12.6"></p><p>把感觉判断不好的数字也一并加入训练集。</p><p>1、2、7、4、6、3是高频错点，都全部加入训练集。</p><p><img src="https://img.lsycai.top/glidedsky/sprite-non-12.7.png" alt="雪碧图反爬-12.7"></p><p>反复重复以上对比操作、添加数据集重新训练操作。</p><p><img src="https://img.lsycai.top/glidedsky/sprite-non-12.8.png" alt="雪碧图反爬-12.8"></p><p>这。。，训练集太少了吧？ &#x3D; &#x3D;</p><p>再加点：</p><p><img src="https://img.lsycai.top/glidedsky/sprite-non-12.9.png" alt="雪碧图反爬-12.9"></p><p>按这样每行10个区分起来会快速些。</p><p>接下来就是不断训练的过程了。</p><p><img src="https://img.lsycai.top/glidedsky/sprite-non-12.10.png" alt="雪碧图反爬-12.10"></p><p><img src="https://img.lsycai.top/glidedsky/sprite-non-12.11.png" alt="雪碧图反爬-12.11"></p><p>这个 <code>6</code> 就离谱</p><p><img src="https://img.lsycai.top/glidedsky/sprite-non-12.12.png" alt="雪碧图反爬-12.12"></p><blockquote><p>之后才意识到，直接获取第一页数据，因为数字固定，能直接获得真实数字和 <code>small_image</code> 的对应关系。</p><p><a href="https://www.cnblogs.com/TurboWay/p/13678074.html">https://www.cnblogs.com/TurboWay/p/13678074.html</a></p></blockquote><p>训练数据：</p><p><img src="https://img.lsycai.top/glidedsky/sprite-non-12.13.png" alt="雪碧图反爬-12.13"></p><p>测试数据：</p><p><img src="https://img.lsycai.top/glidedsky/sprite-non-12.14.png" alt="雪碧图反爬-12.14"></p><p>我靠，resize需要重新赋值，没重新赋值就保存了！全是每resize之前的图片，都得重新下载</p><p>新数据：</p><p><img src="https://img.lsycai.top/glidedsky/sprite-non-12.15.png" alt="雪碧图反爬-12.15"></p><p>重新训练。</p><p>然后每页数据的和，请求次数在3次及其以上，并且有个数频率大于等于3&#x2F;4，才算请求成功，否则重新请求当前页数据。</p><blockquote><p>说明：后续添加训练数据到达42w，应该在10w都够了，我还以为训练出错，多弄了些数据</p><p>还有，即使accuracy达到0.98&#x2F;0.97（测试集有10w），实际爬取时出错概率依旧特别高，一定要一个页面多请求几组，取高频出现的那个判定数据！！！</p></blockquote><blockquote><p>代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">爬虫-雪碧图-2</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> os<br>os.environ[<span class="hljs-string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="hljs-string">&#x27;2&#x27;</span><br><br><span class="hljs-keyword">from</span> env <span class="hljs-keyword">import</span> Env<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> tensorflow <span class="hljs-keyword">import</span> keras<br><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><br><span class="hljs-comment"># 调用封装的登陆环境</span><br>env = Env()<br>session = env.login()<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    获取二维雪碧图(同 2.sprite2_base64img_download.py)</span><br><span class="hljs-string">    context: 网页源码</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_sprite</span>(<span class="hljs-params">context</span>):<br>    <span class="hljs-comment"># 正则解析base64</span><br>    base64_bytes = base64.b64decode(re.search(<span class="hljs-string">&#x27;base64,(.*?)\&quot;&#x27;</span>, context).group(<span class="hljs-number">1</span>))<br><br>    <span class="hljs-comment"># 可以不用写文件, 直接转为Image</span><br>    <span class="hljs-comment"># with open(&#x27;./sprite_img/sprite.png&#x27;, &#x27;wb&#x27;) as f:</span><br>    <span class="hljs-comment">#     f.write(base64_bytes)</span><br><br>    <span class="hljs-keyword">return</span> Image.<span class="hljs-built_in">open</span>(io.BytesIO(base64_bytes))<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    针对每一行的图片进行按列切割, 返回数字的最小宽限集合 如 [(1, 3), (5, 8), ...], 那么横向x 属于 [1, 3] 就是数字0的范围, 一起类推</span><br><span class="hljs-string">    (同 2.sprite2_base64img_download.py)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_gray_interval</span>(<span class="hljs-params">row_image</span>):<br>    interval_list = []<br><br>    <span class="hljs-comment"># 前一列纯白 为真</span><br>    last_col_all_white = <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># 数字开始x 和 数字结束x (2个变量不能被重复赋值0, 所以放到循环外部)</span><br>    num_start_x = <span class="hljs-number">0</span><br>    num_end_x = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># 遍历每一列, 每一行</span><br>    pixels = row_image.load()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row_image.width):<br>        <span class="hljs-comment"># 当前列纯白为真</span><br>        cur_col_all_white = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row_image.height):<br>            <span class="hljs-comment"># 因为是灰度图片 只以 r 值代表颜色即可</span><br>            <span class="hljs-keyword">if</span> pixels[x, y][<span class="hljs-number">0</span>] != <span class="hljs-number">255</span>:<br>                cur_col_all_white = <span class="hljs-literal">False</span><br><br>        <span class="hljs-comment"># 一列迭代结束后</span><br>        <span class="hljs-comment"># 如果 前一列为全白 and 当前列存在灰</span><br>        <span class="hljs-keyword">if</span> last_col_all_white <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> cur_col_all_white:<br>            num_start_x = x<br>        <span class="hljs-comment"># 如果 前一列存在灰 and 当前列全白</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> last_col_all_white <span class="hljs-keyword">and</span> cur_col_all_white:<br>            num_end_x = x<br>            <span class="hljs-comment"># 添加分段信息</span><br>            interval_list.append((num_start_x, num_end_x))<br><br>        <span class="hljs-comment"># 下一列开始前, 重置 last_col_all_white</span><br>        last_col_all_white = cur_col_all_white<br><br>    <span class="hljs-keyword">return</span> interval_list<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    将图片列表转为类似mnist数据结构的数据, 方便模型进行预测</span><br><span class="hljs-string">    return: [100*18*18] 三维矩阵Tensor</span><br><span class="hljs-string">        基本同 3.sprite2_train_test.py 中的 def get_train_data_like_mnist(train_img_path)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_images_like_mnist_data</span>(<span class="hljs-params">small_images</span>):<br>    <span class="hljs-comment"># 准备三维矩阵</span><br>    images = np.zeros([<span class="hljs-built_in">len</span>(small_images), <span class="hljs-number">18</span>, <span class="hljs-number">18</span>])<br><br>    <span class="hljs-comment"># 遍历每个像素点</span><br>    <span class="hljs-keyword">for</span> index, small_image <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(small_images):<br>        <span class="hljs-comment"># 遍历每个图片的所有像素点</span><br>        width = <span class="hljs-number">18</span><br>        height = <span class="hljs-number">18</span><br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, width):<br>            <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, height):<br>                <span class="hljs-comment"># 单通道取 r值 即可  构建[b, 18, 20]  保证灰度值在 0~1</span><br>                images[index][x][y] = small_image.getpixel((x, y))[<span class="hljs-number">0</span>] / <span class="hljs-number">255.0</span><br><br>    <span class="hljs-comment"># 返回训练数据时, 需要将数据封装为Tensor</span><br>    <span class="hljs-keyword">return</span> tf.convert_to_tensor(images, dtype=tf.float32)<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    预测数字</span><br><span class="hljs-string">    return: 返回数字列表(str形式, 后期方便拼接)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">small_images, model</span>):<br>    <span class="hljs-comment"># num表示每一页数据 就是12个</span><br>    num_list = []<br><br>    images_data = parse_images_like_mnist_data(small_images)<br>    <span class="hljs-comment"># 进行预测 predictions 是预测的概率值</span><br>    predictions = model.predict(images_data)<br><br>    <span class="hljs-comment"># 预测值填充进 num_list</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(small_images)):<br>        <span class="hljs-comment"># 将int64转为int</span><br>        num_list.append(np.argmax(predictions[i]))<br><br>    <span class="hljs-keyword">return</span> num_list<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    根据每个单数字div的偏移和宽高从雪碧图中切割出小图, 利用模型识别数字</span><br><span class="hljs-string">    image: 二位雪碧图</span><br><span class="hljs-string">    context: 网页源码</span><br><span class="hljs-string">    return: (切割好的 single_bit_image集合, 一页共12个数每个数有几位数字)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">slice_image</span>(<span class="hljs-params">image, context</span>):<br>    <span class="hljs-comment"># 每一位数字的集合</span><br>    single_bit_images = []<br>    <span class="hljs-comment"># 记录总共12个数字 每个数字各有多少位</span><br>    count_bit = []<br><br>    <span class="hljs-comment"># 获取装有数字的div</span><br>    html = etree.HTML(context)<br>    num_divs = html.xpath(<span class="hljs-string">&#x27;//div[@class=&quot;col-md-1&quot;]&#x27;</span>)<br>    <span class="hljs-comment"># 获取css</span><br>    style = html.xpath(<span class="hljs-string">&#x27;//style/text()&#x27;</span>)[<span class="hljs-number">0</span>]<br><br>    <span class="hljs-comment"># 遍历div(一整个数字)</span><br>    <span class="hljs-keyword">for</span> num_div <span class="hljs-keyword">in</span> num_divs:<br>        <span class="hljs-comment"># 记录这个数字有多少位</span><br>        count = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 遍历每一位数字的每一位</span><br>        <span class="hljs-keyword">for</span> single_bit_div <span class="hljs-keyword">in</span> num_div:<br>            <span class="hljs-comment"># 获取样式</span><br><br>            clazz = single_bit_div.attrib[<span class="hljs-string">&#x27;class&#x27;</span>]<br>            clazz = clazz[:clazz.index(<span class="hljs-string">&#x27; &#x27;</span>)]<br>            <span class="hljs-comment"># 从style查询 offset-x offset-y width height</span><br>            offset_x = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(re.search(clazz + <span class="hljs-string">&#x27; \\&#123; background-position-x:(-?\\d+)px&#x27;</span>, style).group(<span class="hljs-number">1</span>)))<br>            offset_y = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(re.search(clazz + <span class="hljs-string">&#x27; \\&#123; background-position-y:(-?\\d+)px&#x27;</span>, style).group(<span class="hljs-number">1</span>)))<br>            width = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(re.search(clazz + <span class="hljs-string">&#x27; \\&#123; width:(\\d+)px&#x27;</span>, style).group(<span class="hljs-number">1</span>)))<br>            height = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(re.search(clazz + <span class="hljs-string">&#x27; \\&#123; height:(\\d+)px&#x27;</span>, style).group(<span class="hljs-number">1</span>)))<br><br>            <span class="hljs-comment"># 切割 雪碧图中这个偏移和宽高对应的图片 就是当前数字的图</span><br>            single_bit_image = image.crop((offset_x, offset_y, offset_x + width, offset_y + height))<br><br>            <span class="hljs-comment"># resize</span><br>            single_bit_image = single_bit_image.resize((<span class="hljs-number">18</span>, <span class="hljs-number">18</span>), Image.ANTIALIAS)<br><br>            <span class="hljs-comment"># 加入单位数字</span><br>            single_bit_images.append(single_bit_image)<br>            count += <span class="hljs-number">1</span><br><br>        <span class="hljs-comment"># 记录下这个数字的位数</span><br>        count_bit.append(count)<br><br>    <span class="hljs-keyword">return</span> single_bit_images, count_bit<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    根据每一个小数字 和 每个大数字占的位数 的到大数字集合</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mix_num</span>(<span class="hljs-params">single_num_list, count_bit</span>):<br>    index = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 结果</span><br>    num_list = []<br><br>    <span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> count_bit:<br>        num = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 按照位数 顺序拼接每一位 循环次数是bit次</span><br>        <span class="hljs-keyword">while</span> bit:<br>            num += single_num_list[index] * (<span class="hljs-number">10</span> ** (bit - <span class="hljs-number">1</span>))<br>            index += <span class="hljs-number">1</span><br>            bit -= <span class="hljs-number">1</span><br><br>        <span class="hljs-comment"># 填入</span><br>        num_list.append(num)<br><br>    <span class="hljs-keyword">return</span> num_list<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    请求返回当前页数字集合</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_num_list</span>(<span class="hljs-params">page_num, model</span>):<br>    url = <span class="hljs-string">f&#x27;http://www.glidedsky.com/level/web/crawler-sprite-image-2?page=<span class="hljs-subst">&#123;page_num&#125;</span>&#x27;</span><br><br>    response = session.get(url, headers=env.headers)<br><br>    <span class="hljs-comment"># 一张 2维雪碧图</span><br>    sprite_image = get_sprite(response.text)<br>    <span class="hljs-comment"># 分割成的 18*18 小图</span><br>    single_bit_images, count_bit = slice_image(sprite_image, response.text)<br><br>    <span class="hljs-comment"># 推测雪碧图中的真实数字 得到数字列表</span><br>    num_list = predict(single_bit_images, model)<br><br>    <span class="hljs-comment"># 根据列表和有几位数字获得真实数字集合</span><br>    num_list = mix_num(num_list, count_bit)<br>    <span class="hljs-comment"># print(f&#x27;第 &#123;page_num&#125; 页的每个数字: &#x27;, num_list)</span><br><br>    <span class="hljs-keyword">return</span> num_list<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    判断预测是否精确</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_accurate</span>(<span class="hljs-params">predicts</span>):<br>    <span class="hljs-comment"># = =, 模型判断率挺高的了(都42w训练集了), 同一页请求的前三次都相同直接就返回了(即判定准确结果都还有错) 难道存在连续3次都判错的可能?</span><br>    <span class="hljs-comment"># if len(predicts) &lt; 3:</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(predicts) &lt; <span class="hljs-number">6</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    predicts_set = <span class="hljs-built_in">set</span>(predicts)<br>    <span class="hljs-comment"># 看预测结果出现的频率 认定出现频率 &gt;= 2/3 那么这个数才是准确的(因为本身模型确认率虽然接近100% 但不是100%)</span><br>    <span class="hljs-comment"># 统计 &#123; 数字: 出现的次数 &#125;</span><br>    statistics = &#123;num: predicts.count(num) <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> predicts_set&#125;<br><br>    <span class="hljs-comment"># 值逆序排列 返回列表 一对键值混合为元组</span><br>    statistics = <span class="hljs-built_in">sorted</span>(statistics.items(), key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>], reverse=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 值最大的元组 的第二个元素 才是 频数, 元组第一个是数字和</span><br>    <span class="hljs-comment"># 不用这个条件了 = =, 太多预测错误的就会一直卡在当前页了 永远达不到这个比例</span><br>    <span class="hljs-comment"># if statistics[0][1] / len(predicts) &gt;= 3 / 4:</span><br><br>    <span class="hljs-comment"># 采用 只有频率1出现 or 频率top1 / top2 &gt; n 我觉得4够高了啊</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(statistics) == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> statistics[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] / statistics[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] &gt; <span class="hljs-number">4</span>:<br>        <span class="hljs-built_in">print</span>(statistics)<br>        <span class="hljs-keyword">return</span> statistics[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    total = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># 模型文件路径</span><br>    model_path = <span class="hljs-string">&#x27;./sprite-image-2-test/glided_sky_model/glided_sky_model.h5&#x27;</span><br>    <span class="hljs-comment"># 加载模型(放到函数里加载报WARNING, 解决不了: ARNING:tensorflow:6 out of the last 11 calls to &lt;function</span><br>    <span class="hljs-comment">#       Model.make_predict_function.)</span><br>    restored_model = keras.models.load_model(model_path)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1001</span>):<br>        <span class="hljs-comment"># 当前页的预测值集合</span><br>        predicts = []<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span> * <span class="hljs-number">100</span>)<br>        <span class="hljs-comment"># 结果是否准确</span><br>        accurate = is_accurate(predicts)<br>        count = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> accurate:<br>            count += <span class="hljs-number">1</span><br>            <span class="hljs-comment"># 不精确 就重新请求</span><br>            num_list = get_num_list(i, restored_model)<br>            predicts.append(<span class="hljs-built_in">sum</span>(num_list))<br>            accurate = is_accurate(predicts)<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;经过 <span class="hljs-subst">&#123;count&#125;</span> 轮计算, 结果才精确!!!&#x27;</span>)<br>        <span class="hljs-comment"># 判断数值是否精确 这里accurate是int64的, 源于用模型预测时 np.argmax() 结果是 int64</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;第 <span class="hljs-subst">&#123;i&#125;</span> 页数据为: <span class="hljs-subst">&#123;num_list&#125;</span>, 求和是 <span class="hljs-subst">&#123;accurate&#125;</span>&#x27;</span>)<br><br>        total += accurate<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;前 <span class="hljs-subst">&#123;i&#125;</span> 页, 数字和为 <span class="hljs-subst">&#123;total&#125;</span>&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span> * <span class="hljs-number">100</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    page1 [337, 379, 263, 144, 131, 285, 381, 364, 291, 171, 110, 94]</span><br><span class="hljs-string">    page1 + page2 + page3 = 2956 + 2907 + 2844 = 8707</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    错误答案1: 2725233</span><br><span class="hljs-string">    错误答案2: 2724715</span><br><span class="hljs-string">    还真是出错出在连续三次都判定为错误答案!!! 修改为6次以上才判定就好了(多判定几组数据) (正确答案: 27247^_^)</span><br><span class="hljs-string">    之前还怀疑训练42w组数据都能出错 (*￣▽￣*)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> glidedsky </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
